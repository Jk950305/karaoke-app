{"ast":null,"code":"/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n/*\n *! Audio-related methods\n */\n\n\nmodule.exports = function (proto) {\n  /**\n   * Disable audio in the output\n   *\n   * @method FfmpegCommand#noAudio\n   * @category Audio\n   * @aliases withNoAudio\n   * @return FfmpegCommand\n   */\n  proto.withNoAudio = proto.noAudio = function () {\n    this._currentOutput.audio.clear();\n\n    this._currentOutput.audioFilters.clear();\n\n    this._currentOutput.audio('-an');\n\n    return this;\n  };\n  /**\n   * Specify audio codec\n   *\n   * @method FfmpegCommand#audioCodec\n   * @category Audio\n   * @aliases withAudioCodec\n   *\n   * @param {String} codec audio codec name\n   * @return FfmpegCommand\n   */\n\n\n  proto.withAudioCodec = proto.audioCodec = function (codec) {\n    this._currentOutput.audio('-acodec', codec);\n\n    return this;\n  };\n  /**\n   * Specify audio bitrate\n   *\n   * @method FfmpegCommand#audioBitrate\n   * @category Audio\n   * @aliases withAudioBitrate\n   *\n   * @param {String|Number} bitrate audio bitrate in kbps (with an optional 'k' suffix)\n   * @return FfmpegCommand\n   */\n\n\n  proto.withAudioBitrate = proto.audioBitrate = function (bitrate) {\n    this._currentOutput.audio('-b:a', ('' + bitrate).replace(/k?$/, 'k'));\n\n    return this;\n  };\n  /**\n   * Specify audio channel count\n   *\n   * @method FfmpegCommand#audioChannels\n   * @category Audio\n   * @aliases withAudioChannels\n   *\n   * @param {Number} channels channel count\n   * @return FfmpegCommand\n   */\n\n\n  proto.withAudioChannels = proto.audioChannels = function (channels) {\n    this._currentOutput.audio('-ac', channels);\n\n    return this;\n  };\n  /**\n   * Specify audio frequency\n   *\n   * @method FfmpegCommand#audioFrequency\n   * @category Audio\n   * @aliases withAudioFrequency\n   *\n   * @param {Number} freq audio frequency in Hz\n   * @return FfmpegCommand\n   */\n\n\n  proto.withAudioFrequency = proto.audioFrequency = function (freq) {\n    this._currentOutput.audio('-ar', freq);\n\n    return this;\n  };\n  /**\n   * Specify audio quality\n   *\n   * @method FfmpegCommand#audioQuality\n   * @category Audio\n   * @aliases withAudioQuality\n   *\n   * @param {Number} quality audio quality factor\n   * @return FfmpegCommand\n   */\n\n\n  proto.withAudioQuality = proto.audioQuality = function (quality) {\n    this._currentOutput.audio('-aq', quality);\n\n    return this;\n  };\n  /**\n   * Specify custom audio filter(s)\n   *\n   * Can be called both with one or many filters, or a filter array.\n   *\n   * @example\n   * command.audioFilters('filter1');\n   *\n   * @example\n   * command.audioFilters('filter1', 'filter2=param1=value1:param2=value2');\n   *\n   * @example\n   * command.audioFilters(['filter1', 'filter2']);\n   *\n   * @example\n   * command.audioFilters([\n   *   {\n   *     filter: 'filter1'\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: 'param=value:param=value'\n   *   }\n   * ]);\n   *\n   * @example\n   * command.audioFilters(\n   *   {\n   *     filter: 'filter1',\n   *     options: ['value1', 'value2']\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: { param1: 'value1', param2: 'value2' }\n   *   }\n   * );\n   *\n   * @method FfmpegCommand#audioFilters\n   * @aliases withAudioFilter,withAudioFilters,audioFilter\n   * @category Audio\n   *\n   * @param {...String|String[]|Object[]} filters audio filter strings, string array or\n   *   filter specification array, each with the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|String[]|Object} [filters.options] filter option string, array, or object\n   * @return FfmpegCommand\n   */\n\n\n  proto.withAudioFilter = proto.withAudioFilters = proto.audioFilter = proto.audioFilters = function (filters) {\n    if (arguments.length > 1) {\n      filters = [].slice.call(arguments);\n    }\n\n    if (!Array.isArray(filters)) {\n      filters = [filters];\n    }\n\n    this._currentOutput.audioFilters(utils.makeFilterStrings(filters));\n\n    return this;\n  };\n};","map":{"version":3,"sources":["/Users/jonkim/my-app/node_modules/fluent-ffmpeg/lib/options/audio.js"],"names":["utils","require","module","exports","proto","withNoAudio","noAudio","_currentOutput","audio","clear","audioFilters","withAudioCodec","audioCodec","codec","withAudioBitrate","audioBitrate","bitrate","replace","withAudioChannels","audioChannels","channels","withAudioFrequency","audioFrequency","freq","withAudioQuality","audioQuality","quality","withAudioFilter","withAudioFilters","audioFilter","filters","arguments","length","slice","call","Array","isArray","makeFilterStrings"],"mappings":"AAAA;AACA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAGA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAgB;AAC/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEA,EAAAA,KAAK,CAACC,WAAN,GACAD,KAAK,CAACE,OAAN,GAAgB,YAAW;AACzB,SAAKC,cAAL,CAAoBC,KAApB,CAA0BC,KAA1B;;AACA,SAAKF,cAAL,CAAoBG,YAApB,CAAiCD,KAAjC;;AACA,SAAKF,cAAL,CAAoBC,KAApB,CAA0B,KAA1B;;AAEA,WAAO,IAAP;AACD,GAPD;AAUA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEJ,EAAAA,KAAK,CAACO,cAAN,GACAP,KAAK,CAACQ,UAAN,GAAmB,UAASC,KAAT,EAAgB;AACjC,SAAKN,cAAL,CAAoBC,KAApB,CAA0B,SAA1B,EAAqCK,KAArC;;AAEA,WAAO,IAAP;AACD,GALD;AAQA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACET,EAAAA,KAAK,CAACU,gBAAN,GACAV,KAAK,CAACW,YAAN,GAAqB,UAASC,OAAT,EAAkB;AACrC,SAAKT,cAAL,CAAoBC,KAApB,CAA0B,MAA1B,EAAkC,CAAC,KAAKQ,OAAN,EAAeC,OAAf,CAAuB,KAAvB,EAA8B,GAA9B,CAAlC;;AACA,WAAO,IAAP;AACD,GAJD;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEb,EAAAA,KAAK,CAACc,iBAAN,GACAd,KAAK,CAACe,aAAN,GAAsB,UAASC,QAAT,EAAmB;AACvC,SAAKb,cAAL,CAAoBC,KAApB,CAA0B,KAA1B,EAAiCY,QAAjC;;AACA,WAAO,IAAP;AACD,GAJD;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEhB,EAAAA,KAAK,CAACiB,kBAAN,GACAjB,KAAK,CAACkB,cAAN,GAAuB,UAASC,IAAT,EAAe;AACpC,SAAKhB,cAAL,CAAoBC,KAApB,CAA0B,KAA1B,EAAiCe,IAAjC;;AACA,WAAO,IAAP;AACD,GAJD;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEnB,EAAAA,KAAK,CAACoB,gBAAN,GACApB,KAAK,CAACqB,YAAN,GAAqB,UAASC,OAAT,EAAkB;AACrC,SAAKnB,cAAL,CAAoBC,KAApB,CAA0B,KAA1B,EAAiCkB,OAAjC;;AACA,WAAO,IAAP;AACD,GAJD;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEtB,EAAAA,KAAK,CAACuB,eAAN,GACAvB,KAAK,CAACwB,gBAAN,GACAxB,KAAK,CAACyB,WAAN,GACAzB,KAAK,CAACM,YAAN,GAAqB,UAASoB,OAAT,EAAkB;AACrC,QAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxBF,MAAAA,OAAO,GAAG,GAAGG,KAAH,CAASC,IAAT,CAAcH,SAAd,CAAV;AACD;;AAED,QAAI,CAACI,KAAK,CAACC,OAAN,CAAcN,OAAd,CAAL,EAA6B;AAC3BA,MAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AAED,SAAKvB,cAAL,CAAoBG,YAApB,CAAiCV,KAAK,CAACqC,iBAAN,CAAwBP,OAAxB,CAAjC;;AACA,WAAO,IAAP;AACD,GAdD;AAeD,CAvKD","sourcesContent":["/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n\n/*\n *! Audio-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Disable audio in the output\n   *\n   * @method FfmpegCommand#noAudio\n   * @category Audio\n   * @aliases withNoAudio\n   * @return FfmpegCommand\n   */\n  proto.withNoAudio =\n  proto.noAudio = function() {\n    this._currentOutput.audio.clear();\n    this._currentOutput.audioFilters.clear();\n    this._currentOutput.audio('-an');\n\n    return this;\n  };\n\n\n  /**\n   * Specify audio codec\n   *\n   * @method FfmpegCommand#audioCodec\n   * @category Audio\n   * @aliases withAudioCodec\n   *\n   * @param {String} codec audio codec name\n   * @return FfmpegCommand\n   */\n  proto.withAudioCodec =\n  proto.audioCodec = function(codec) {\n    this._currentOutput.audio('-acodec', codec);\n\n    return this;\n  };\n\n\n  /**\n   * Specify audio bitrate\n   *\n   * @method FfmpegCommand#audioBitrate\n   * @category Audio\n   * @aliases withAudioBitrate\n   *\n   * @param {String|Number} bitrate audio bitrate in kbps (with an optional 'k' suffix)\n   * @return FfmpegCommand\n   */\n  proto.withAudioBitrate =\n  proto.audioBitrate = function(bitrate) {\n    this._currentOutput.audio('-b:a', ('' + bitrate).replace(/k?$/, 'k'));\n    return this;\n  };\n\n\n  /**\n   * Specify audio channel count\n   *\n   * @method FfmpegCommand#audioChannels\n   * @category Audio\n   * @aliases withAudioChannels\n   *\n   * @param {Number} channels channel count\n   * @return FfmpegCommand\n   */\n  proto.withAudioChannels =\n  proto.audioChannels = function(channels) {\n    this._currentOutput.audio('-ac', channels);\n    return this;\n  };\n\n\n  /**\n   * Specify audio frequency\n   *\n   * @method FfmpegCommand#audioFrequency\n   * @category Audio\n   * @aliases withAudioFrequency\n   *\n   * @param {Number} freq audio frequency in Hz\n   * @return FfmpegCommand\n   */\n  proto.withAudioFrequency =\n  proto.audioFrequency = function(freq) {\n    this._currentOutput.audio('-ar', freq);\n    return this;\n  };\n\n\n  /**\n   * Specify audio quality\n   *\n   * @method FfmpegCommand#audioQuality\n   * @category Audio\n   * @aliases withAudioQuality\n   *\n   * @param {Number} quality audio quality factor\n   * @return FfmpegCommand\n   */\n  proto.withAudioQuality =\n  proto.audioQuality = function(quality) {\n    this._currentOutput.audio('-aq', quality);\n    return this;\n  };\n\n\n  /**\n   * Specify custom audio filter(s)\n   *\n   * Can be called both with one or many filters, or a filter array.\n   *\n   * @example\n   * command.audioFilters('filter1');\n   *\n   * @example\n   * command.audioFilters('filter1', 'filter2=param1=value1:param2=value2');\n   *\n   * @example\n   * command.audioFilters(['filter1', 'filter2']);\n   *\n   * @example\n   * command.audioFilters([\n   *   {\n   *     filter: 'filter1'\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: 'param=value:param=value'\n   *   }\n   * ]);\n   *\n   * @example\n   * command.audioFilters(\n   *   {\n   *     filter: 'filter1',\n   *     options: ['value1', 'value2']\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: { param1: 'value1', param2: 'value2' }\n   *   }\n   * );\n   *\n   * @method FfmpegCommand#audioFilters\n   * @aliases withAudioFilter,withAudioFilters,audioFilter\n   * @category Audio\n   *\n   * @param {...String|String[]|Object[]} filters audio filter strings, string array or\n   *   filter specification array, each with the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|String[]|Object} [filters.options] filter option string, array, or object\n   * @return FfmpegCommand\n   */\n  proto.withAudioFilter =\n  proto.withAudioFilters =\n  proto.audioFilter =\n  proto.audioFilters = function(filters) {\n    if (arguments.length > 1) {\n      filters = [].slice.call(arguments);\n    }\n\n    if (!Array.isArray(filters)) {\n      filters = [filters];\n    }\n\n    this._currentOutput.audioFilters(utils.makeFilterStrings(filters));\n    return this;\n  };\n};\n"]},"metadata":{},"sourceType":"script"}