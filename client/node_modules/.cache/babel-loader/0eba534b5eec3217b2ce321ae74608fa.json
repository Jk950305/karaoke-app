{"ast":null,"code":"/**\n * A minimal working polyfill of miniget that doesn't use node's streaming api\n */\nconst retryStatusCodes = new Set([429, 503]);\n\nconst miniget = (url, reqOptions = {}) => {\n  const fetchOptions = { ...reqOptions\n  };\n  fetchOptions.headers = {\n    \"Content-Type\": 'text/plain;charset=UTF-8',\n    ...fetchOptions.headers\n  };\n  const fetchPromiseText = fetch(url, fetchOptions).then(res => {\n    if (retryStatusCodes.has(res.status)) {\n      throw Error(`Error: Status code: ${res.status}`);\n    }\n\n    return res;\n  }).then(res => res.text());\n  return {\n    on: (event, callback) => {\n      switch (event) {\n        case 'data':\n          fetchPromiseText.then(callback);\n          break;\n\n        case 'error':\n          fetchPromiseText.catch(callback);\n          break;\n\n        case 'end':\n          fetchPromiseText.finally(callback);\n          break;\n\n        default:\n          console.warn(`react-native-ytdl: miniget: unknown event listener received: ${event}`);\n      }\n    },\n    setEncoding: () => {\n      console.warn(`react-native-ytdl: miniget: will not use specified encoding since request has already been made. Currently using utf8 encoding.`);\n    },\n    text: () => {\n      return fetchPromiseText;\n    }\n  };\n};\n\nminiget.MinigetError = class MinigetError extends Error {\n  constructor(message) {\n    super(message);\n  }\n\n};\nminiget.defaultOptions = {\n  maxRedirects: 10,\n  maxRetries: 5,\n  maxReconnects: 0,\n  backoff: {\n    inc: 100,\n    max: 10000\n  }\n};\nmodule.exports = miniget;","map":{"version":3,"sources":["/Users/jonkim/my-app/node_modules/react-native-ytdl/lib/__REACT_NATIVE_YTDL_CUSTOM_MODULES__/miniget/index.js"],"names":["retryStatusCodes","Set","miniget","url","reqOptions","fetchOptions","headers","fetchPromiseText","fetch","then","res","has","status","Error","text","on","event","callback","catch","finally","console","warn","setEncoding","MinigetError","constructor","message","defaultOptions","maxRedirects","maxRetries","maxReconnects","backoff","inc","max","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,gBAAgB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,CAAR,CAAzB;;AAEA,MAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,UAAU,GAAG,EAAnB,KAA0B;AAEtC,QAAMC,YAAY,GAAG,EAAE,GAAGD;AAAL,GAArB;AACAC,EAAAA,YAAY,CAACC,OAAb,GAAuB;AACnB,oBAAgB,0BADG;AAEnB,OAAGD,YAAY,CAACC;AAFG,GAAvB;AAKA,QAAMC,gBAAgB,GAAGC,KAAK,CAACL,GAAD,EAAME,YAAN,CAAL,CACpBI,IADoB,CACfC,GAAG,IAAI;AACT,QAAGV,gBAAgB,CAACW,GAAjB,CAAqBD,GAAG,CAACE,MAAzB,CAAH,EAAoC;AAChC,YAAMC,KAAK,CAAE,uBAAsBH,GAAG,CAACE,MAAO,EAAnC,CAAX;AACH;;AAED,WAAOF,GAAP;AACH,GAPoB,EAQpBD,IARoB,CAQfC,GAAG,IAAIA,GAAG,CAACI,IAAJ,EARQ,CAAzB;AAUA,SAAO;AACHC,IAAAA,EAAE,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACrB,cAAQD,KAAR;AACI,aAAK,MAAL;AAAaT,UAAAA,gBAAgB,CAACE,IAAjB,CAAsBQ,QAAtB;AAAiC;;AAC9C,aAAK,OAAL;AAAcV,UAAAA,gBAAgB,CAACW,KAAjB,CAAuBD,QAAvB;AAAkC;;AAChD,aAAK,KAAL;AAAYV,UAAAA,gBAAgB,CAACY,OAAjB,CAAyBF,QAAzB;AAAoC;;AAEhD;AACIG,UAAAA,OAAO,CAACC,IAAR,CAAc,gEAA+DL,KAAM,EAAnF;AANR;AAQH,KAVE;AAWHM,IAAAA,WAAW,EAAE,MAAM;AACfF,MAAAA,OAAO,CAACC,IAAR,CAAc,iIAAd;AACH,KAbE;AAcHP,IAAAA,IAAI,EAAE,MAAM;AACR,aAAOP,gBAAP;AACH;AAhBE,GAAP;AAkBH,CApCD;;AAsCAL,OAAO,CAACqB,YAAR,GAAuB,MAAMA,YAAN,SAA2BV,KAA3B,CAAiC;AACpDW,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,UAAMA,OAAN;AACH;;AAHmD,CAAxD;AAMAvB,OAAO,CAACwB,cAAR,GAAyB;AACrBC,EAAAA,YAAY,EAAE,EADO;AAErBC,EAAAA,UAAU,EAAE,CAFS;AAGrBC,EAAAA,aAAa,EAAE,CAHM;AAIrBC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,GAAG,EAAE,GAAP;AAAYC,IAAAA,GAAG,EAAE;AAAjB;AAJY,CAAzB;AAOAC,MAAM,CAACC,OAAP,GAAiBhC,OAAjB","sourcesContent":["/**\n * A minimal working polyfill of miniget that doesn't use node's streaming api\n */\n\nconst retryStatusCodes = new Set([429, 503]);\n\nconst miniget = (url, reqOptions = {}) => {\n\n    const fetchOptions = { ...reqOptions };\n    fetchOptions.headers = {\n        \"Content-Type\": 'text/plain;charset=UTF-8',\n        ...fetchOptions.headers,\n    }\n\n    const fetchPromiseText = fetch(url, fetchOptions)\n        .then(res => {\n            if(retryStatusCodes.has(res.status)){\n                throw Error(`Error: Status code: ${res.status}`)\n            }\n\n            return res;\n        })\n        .then(res => res.text())\n\n    return {\n        on: (event, callback) => {\n            switch (event) {\n                case 'data': fetchPromiseText.then(callback); break;\n                case 'error': fetchPromiseText.catch(callback); break;\n                case 'end': fetchPromiseText.finally(callback); break;\n\n                default:\n                    console.warn(`react-native-ytdl: miniget: unknown event listener received: ${event}`)\n            }\n        },\n        setEncoding: () => {\n            console.warn(`react-native-ytdl: miniget: will not use specified encoding since request has already been made. Currently using utf8 encoding.`)\n        },\n        text: () => {\n            return fetchPromiseText\n        }\n    };\n}\n\nminiget.MinigetError = class MinigetError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n\nminiget.defaultOptions = {\n    maxRedirects: 10,\n    maxRetries: 5,\n    maxReconnects: 0,\n    backoff: { inc: 100, max: 10000 },\n}\n\nmodule.exports = miniget\n"]},"metadata":{},"sourceType":"script"}