{"ast":null,"code":"const url = require('url');\n/**\n * Get video ID.\n *\n * There are a few type of video URL formats.\n *  - https://www.youtube.com/watch?v=VIDEO_ID\n *  - https://m.youtube.com/watch?v=VIDEO_ID\n *  - https://youtu.be/VIDEO_ID\n *  - https://www.youtube.com/v/VIDEO_ID\n *  - https://www.youtube.com/embed/VIDEO_ID\n *  - https://music.youtube.com/watch?v=VIDEO_ID\n *  - https://gaming.youtube.com/watch?v=VIDEO_ID\n *\n * @param {string} link\n * @return {string}\n * @throws {Error} If unable to find a id\n * @throws {TypeError} If videoid doesn't match specs\n */\n\n\nconst validQueryDomains = new Set(['youtube.com', 'www.youtube.com', 'm.youtube.com', 'music.youtube.com', 'gaming.youtube.com']);\nconst validPathDomains = /^https?:\\/\\/(youtu\\.be\\/|(www\\.)?youtube.com\\/(embed|v)\\/)/;\n\nexports.getURLVideoID = link => {\n  const parsed = url.parse(link, true);\n  let id = parsed.query.v;\n\n  if (validPathDomains.test(link) && !id) {\n    const paths = parsed.pathname.split('/');\n    id = paths[paths.length - 1];\n  } else if (parsed.hostname && !validQueryDomains.has(parsed.hostname)) {\n    throw Error('Not a YouTube domain');\n  }\n\n  if (!id) {\n    throw Error(`No video id found: ${link}`);\n  }\n\n  id = id.substring(0, 11);\n\n  if (!exports.validateID(id)) {\n    throw TypeError(`Video id (${id}) does not match expected ` + `format (${idRegex.toString()})`);\n  }\n\n  return id;\n};\n/**\n * Gets video ID either from a url or by checking if the given string\n * matches the video ID format.\n *\n * @param {string} str\n * @returns {string}\n * @throws {Error} If unable to find a id\n * @throws {TypeError} If videoid doesn't match specs\n */\n\n\nexports.getVideoID = str => {\n  if (exports.validateID(str)) {\n    return str;\n  } else {\n    return exports.getURLVideoID(str);\n  }\n};\n/**\n * Returns true if given id satifies YouTube's id format.\n *\n * @param {string} id\n * @return {boolean}\n */\n\n\nconst idRegex = /^[a-zA-Z0-9-_]{11}$/;\n\nexports.validateID = id => idRegex.test(id);\n/**\n * Checks wether the input string includes a valid id.\n *\n * @param {string} string\n * @returns {boolean}\n */\n\n\nexports.validateURL = string => {\n  try {\n    exports.getURLVideoID(string);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/jonkim/my-app/node_modules/ytdl-core/lib/url-utils.js"],"names":["url","require","validQueryDomains","Set","validPathDomains","exports","getURLVideoID","link","parsed","parse","id","query","v","test","paths","pathname","split","length","hostname","has","Error","substring","validateID","TypeError","idRegex","toString","getVideoID","str","validateURL","string","e"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAChC,aADgC,EAEhC,iBAFgC,EAGhC,eAHgC,EAIhC,mBAJgC,EAKhC,oBALgC,CAAR,CAA1B;AAOA,MAAMC,gBAAgB,GAAG,4DAAzB;;AACAC,OAAO,CAACC,aAAR,GAAwBC,IAAI,IAAI;AAC9B,QAAMC,MAAM,GAAGR,GAAG,CAACS,KAAJ,CAAUF,IAAV,EAAgB,IAAhB,CAAf;AACA,MAAIG,EAAE,GAAGF,MAAM,CAACG,KAAP,CAAaC,CAAtB;;AACA,MAAIR,gBAAgB,CAACS,IAAjB,CAAsBN,IAAtB,KAA+B,CAACG,EAApC,EAAwC;AACtC,UAAMI,KAAK,GAAGN,MAAM,CAACO,QAAP,CAAgBC,KAAhB,CAAsB,GAAtB,CAAd;AACAN,IAAAA,EAAE,GAAGI,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAV;AACD,GAHD,MAGO,IAAIT,MAAM,CAACU,QAAP,IAAmB,CAAChB,iBAAiB,CAACiB,GAAlB,CAAsBX,MAAM,CAACU,QAA7B,CAAxB,EAAgE;AACrE,UAAME,KAAK,CAAC,sBAAD,CAAX;AACD;;AACD,MAAI,CAACV,EAAL,EAAS;AACP,UAAMU,KAAK,CAAE,sBAAqBb,IAAK,EAA5B,CAAX;AACD;;AACDG,EAAAA,EAAE,GAAGA,EAAE,CAACW,SAAH,CAAa,CAAb,EAAgB,EAAhB,CAAL;;AACA,MAAI,CAAChB,OAAO,CAACiB,UAAR,CAAmBZ,EAAnB,CAAL,EAA6B;AAC3B,UAAMa,SAAS,CAAE,aAAYb,EAAG,4BAAhB,GACb,WAAUc,OAAO,CAACC,QAAR,EAAmB,GADjB,CAAf;AAED;;AACD,SAAOf,EAAP;AACD,CAlBD;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,OAAO,CAACqB,UAAR,GAAqBC,GAAG,IAAI;AAC1B,MAAItB,OAAO,CAACiB,UAAR,CAAmBK,GAAnB,CAAJ,EAA6B;AAC3B,WAAOA,GAAP;AACD,GAFD,MAEO;AACL,WAAOtB,OAAO,CAACC,aAAR,CAAsBqB,GAAtB,CAAP;AACD;AACF,CAND;AASA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMH,OAAO,GAAG,qBAAhB;;AACAnB,OAAO,CAACiB,UAAR,GAAqBZ,EAAE,IAAIc,OAAO,CAACX,IAAR,CAAaH,EAAb,CAA3B;AAGA;AACA;AACA;AACA;AACA;AACA;;;AACAL,OAAO,CAACuB,WAAR,GAAsBC,MAAM,IAAI;AAC9B,MAAI;AACFxB,IAAAA,OAAO,CAACC,aAAR,CAAsBuB,MAAtB;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,CAPD","sourcesContent":["const url = require('url');\n\n\n/**\n * Get video ID.\n *\n * There are a few type of video URL formats.\n *  - https://www.youtube.com/watch?v=VIDEO_ID\n *  - https://m.youtube.com/watch?v=VIDEO_ID\n *  - https://youtu.be/VIDEO_ID\n *  - https://www.youtube.com/v/VIDEO_ID\n *  - https://www.youtube.com/embed/VIDEO_ID\n *  - https://music.youtube.com/watch?v=VIDEO_ID\n *  - https://gaming.youtube.com/watch?v=VIDEO_ID\n *\n * @param {string} link\n * @return {string}\n * @throws {Error} If unable to find a id\n * @throws {TypeError} If videoid doesn't match specs\n */\nconst validQueryDomains = new Set([\n  'youtube.com',\n  'www.youtube.com',\n  'm.youtube.com',\n  'music.youtube.com',\n  'gaming.youtube.com',\n]);\nconst validPathDomains = /^https?:\\/\\/(youtu\\.be\\/|(www\\.)?youtube.com\\/(embed|v)\\/)/;\nexports.getURLVideoID = link => {\n  const parsed = url.parse(link, true);\n  let id = parsed.query.v;\n  if (validPathDomains.test(link) && !id) {\n    const paths = parsed.pathname.split('/');\n    id = paths[paths.length - 1];\n  } else if (parsed.hostname && !validQueryDomains.has(parsed.hostname)) {\n    throw Error('Not a YouTube domain');\n  }\n  if (!id) {\n    throw Error(`No video id found: ${link}`);\n  }\n  id = id.substring(0, 11);\n  if (!exports.validateID(id)) {\n    throw TypeError(`Video id (${id}) does not match expected ` +\n      `format (${idRegex.toString()})`);\n  }\n  return id;\n};\n\n\n/**\n * Gets video ID either from a url or by checking if the given string\n * matches the video ID format.\n *\n * @param {string} str\n * @returns {string}\n * @throws {Error} If unable to find a id\n * @throws {TypeError} If videoid doesn't match specs\n */\nexports.getVideoID = str => {\n  if (exports.validateID(str)) {\n    return str;\n  } else {\n    return exports.getURLVideoID(str);\n  }\n};\n\n\n/**\n * Returns true if given id satifies YouTube's id format.\n *\n * @param {string} id\n * @return {boolean}\n */\nconst idRegex = /^[a-zA-Z0-9-_]{11}$/;\nexports.validateID = id => idRegex.test(id);\n\n\n/**\n * Checks wether the input string includes a valid id.\n *\n * @param {string} string\n * @returns {boolean}\n */\nexports.validateURL = string => {\n  try {\n    exports.getURLVideoID(string);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}