{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.durationStr = exports.humanStr = void 0;\n/**\n * Converts human friendly time to milliseconds. Supports the format\n * 00:00:00.000 for hours, minutes, seconds, and milliseconds respectively.\n * And 0ms, 0s, 0m, 0h, and together 1m1s.\n */\n\nconst numberFormat = /^\\d+$/;\nconst timeFormat = /^(?:(?:(\\d+):)?(\\d{1,2}):)?(\\d{1,2})(?:\\.(\\d{3}))?$/;\nconst timeUnits = {\n  ms: 1,\n  s: 1000,\n  m: 60000,\n  h: 3600000\n};\n\nexports.humanStr = time => {\n  if (typeof time === 'number') {\n    return time;\n  }\n\n  if (numberFormat.test(time)) {\n    return +time;\n  }\n\n  const firstFormat = timeFormat.exec(time);\n\n  if (firstFormat) {\n    return +(firstFormat[1] || 0) * timeUnits.h + +(firstFormat[2] || 0) * timeUnits.m + +firstFormat[3] * timeUnits.s + +(firstFormat[4] || 0);\n  } else {\n    let total = 0;\n    const r = /(-?\\d+)(ms|s|m|h)/g;\n    let rs;\n\n    while ((rs = r.exec(time)) != null) {\n      total += +rs[1] * timeUnits[rs[2]];\n    }\n\n    return total;\n  }\n};\n/**\n * Parses a duration string in the form of \"123.456S\", returns milliseconds.\n */\n\n\nexports.durationStr = time => {\n  let total = 0;\n  const r = /(\\d+(?:\\.\\d+)?)(S|M|H)/g;\n  let rs;\n\n  while ((rs = r.exec(time)) != null) {\n    total += +rs[1] * timeUnits[rs[2].toLowerCase()];\n  }\n\n  return total;\n};","map":{"version":3,"sources":["../src/parse-time.ts"],"names":[],"mappings":";;;;;;AAAA;;;;AAIG;;AACH,MAAM,YAAY,GAAG,OAArB;AACA,MAAM,UAAU,GAAG,qDAAnB;AACA,MAAM,SAAS,GAA8B;AAC3C,EAAA,EAAE,EAAE,CADuC;AAE3C,EAAA,CAAC,EAAE,IAFwC;AAG3C,EAAA,CAAC,EAAE,KAHwC;AAI3C,EAAA,CAAC,EAAE;AAJwC,CAA7C;;AAMa,OAAA,CAAA,QAAA,GAAY,IAAD,IAAkC;AACxD,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAAE,WAAO,IAAP;AAAc;;AAC9C,MAAI,YAAY,CAAC,IAAb,CAAkB,IAAlB,CAAJ,EAA6B;AAAE,WAAO,CAAC,IAAR;AAAe;;AAC9C,QAAM,WAAW,GAAG,UAAU,CAAC,IAAX,CAAgB,IAAhB,CAApB;;AACA,MAAI,WAAJ,EAAiB;AACf,WAAO,EAAE,WAAW,CAAC,CAAD,CAAX,IAAkB,CAApB,IAAyB,SAAS,CAAC,CAAnC,GACL,EAAE,WAAW,CAAC,CAAD,CAAX,IAAkB,CAApB,IAAyB,SAAS,CAAC,CAD9B,GAEL,CAAC,WAAW,CAAC,CAAD,CAAZ,GAAkB,SAAS,CAAC,CAFvB,GAGL,EAAE,WAAW,CAAC,CAAD,CAAX,IAAkB,CAApB,CAHF;AAID,GALD,MAKO;AACL,QAAI,KAAK,GAAG,CAAZ;AACA,UAAM,CAAC,GAAG,oBAAV;AACA,QAAI,EAAJ;;AACA,WAAO,CAAC,EAAE,GAAG,CAAC,CAAC,IAAF,CAAO,IAAP,CAAN,KAAuB,IAA9B,EAAoC;AAClC,MAAA,KAAK,IAAI,CAAC,EAAE,CAAC,CAAD,CAAH,GAAS,SAAS,CAAC,EAAE,CAAC,CAAD,CAAH,CAA3B;AACD;;AACD,WAAO,KAAP;AACD;AACF,CAlBY;AAoBb;;AAEG;;;AACU,OAAA,CAAA,WAAA,GAAe,IAAD,IAAyB;AAClD,MAAI,KAAK,GAAG,CAAZ;AACA,QAAM,CAAC,GAAG,yBAAV;AACA,MAAI,EAAJ;;AACA,SAAO,CAAC,EAAE,GAAG,CAAC,CAAC,IAAF,CAAO,IAAP,CAAN,KAAuB,IAA9B,EAAoC;AAClC,IAAA,KAAK,IAAI,CAAC,EAAE,CAAC,CAAD,CAAH,GAAS,SAAS,CAAC,EAAE,CAAC,CAAD,CAAF,CAAM,WAAN,EAAD,CAA3B;AACD;;AACD,SAAO,KAAP;AACD,CARY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.durationStr = exports.humanStr = void 0;\n/**\n * Converts human friendly time to milliseconds. Supports the format\n * 00:00:00.000 for hours, minutes, seconds, and milliseconds respectively.\n * And 0ms, 0s, 0m, 0h, and together 1m1s.\n */\nconst numberFormat = /^\\d+$/;\nconst timeFormat = /^(?:(?:(\\d+):)?(\\d{1,2}):)?(\\d{1,2})(?:\\.(\\d{3}))?$/;\nconst timeUnits = {\n    ms: 1,\n    s: 1000,\n    m: 60000,\n    h: 3600000,\n};\nexports.humanStr = (time) => {\n    if (typeof time === 'number') {\n        return time;\n    }\n    if (numberFormat.test(time)) {\n        return +time;\n    }\n    const firstFormat = timeFormat.exec(time);\n    if (firstFormat) {\n        return +(firstFormat[1] || 0) * timeUnits.h +\n            +(firstFormat[2] || 0) * timeUnits.m +\n            +firstFormat[3] * timeUnits.s +\n            +(firstFormat[4] || 0);\n    }\n    else {\n        let total = 0;\n        const r = /(-?\\d+)(ms|s|m|h)/g;\n        let rs;\n        while ((rs = r.exec(time)) != null) {\n            total += +rs[1] * timeUnits[rs[2]];\n        }\n        return total;\n    }\n};\n/**\n * Parses a duration string in the form of \"123.456S\", returns milliseconds.\n */\nexports.durationStr = (time) => {\n    let total = 0;\n    const r = /(\\d+(?:\\.\\d+)?)(S|M|H)/g;\n    let rs;\n    while ((rs = r.exec(time)) != null) {\n        total += +rs[1] * timeUnits[rs[2].toLowerCase()];\n    }\n    return total;\n};\n//# sourceMappingURL=parse-time.js.map"]},"metadata":{},"sourceType":"script"}