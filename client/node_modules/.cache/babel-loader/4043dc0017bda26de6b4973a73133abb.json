{"ast":null,"code":"/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n/*\n *! Input-related methods\n */\n\n\nmodule.exports = function (proto) {\n  /**\n   * Add an input to command\n   *\n   * Also switches \"current input\", that is the input that will be affected\n   * by subsequent input-related methods.\n   *\n   * Note: only one stream input is supported for now.\n   *\n   * @method FfmpegCommand#input\n   * @category Input\n   * @aliases mergeAdd,addInput\n   *\n   * @param {String|Readable} source input file path or readable stream\n   * @return FfmpegCommand\n   */\n  proto.mergeAdd = proto.addInput = proto.input = function (source) {\n    var isFile = false;\n    var isStream = false;\n\n    if (typeof source !== 'string') {\n      if (!('readable' in source) || !source.readable) {\n        throw new Error('Invalid input');\n      }\n\n      var hasInputStream = this._inputs.some(function (input) {\n        return input.isStream;\n      });\n\n      if (hasInputStream) {\n        throw new Error('Only one input stream is supported');\n      }\n\n      isStream = true;\n      source.pause();\n    } else {\n      var protocol = source.match(/^([a-z]{2,}):/i);\n      isFile = !protocol || protocol[0] === 'file';\n    }\n\n    this._inputs.push(this._currentInput = {\n      source: source,\n      isFile: isFile,\n      isStream: isStream,\n      options: utils.args()\n    });\n\n    return this;\n  };\n  /**\n   * Specify input format for the last specified input\n   *\n   * @method FfmpegCommand#inputFormat\n   * @category Input\n   * @aliases withInputFormat,fromFormat\n   *\n   * @param {String} format input format\n   * @return FfmpegCommand\n   */\n\n\n  proto.withInputFormat = proto.inputFormat = proto.fromFormat = function (format) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-f', format);\n\n    return this;\n  };\n  /**\n   * Specify input FPS for the last specified input\n   * (only valid for raw video formats)\n   *\n   * @method FfmpegCommand#inputFps\n   * @category Input\n   * @aliases withInputFps,withInputFPS,withFpsInput,withFPSInput,inputFPS,inputFps,fpsInput\n   *\n   * @param {Number} fps input FPS\n   * @return FfmpegCommand\n   */\n\n\n  proto.withInputFps = proto.withInputFPS = proto.withFpsInput = proto.withFPSInput = proto.inputFPS = proto.inputFps = proto.fpsInput = proto.FPSInput = function (fps) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-r', fps);\n\n    return this;\n  };\n  /**\n   * Use native framerate for the last specified input\n   *\n   * @method FfmpegCommand#native\n   * @category Input\n   * @aliases nativeFramerate,withNativeFramerate\n   *\n   * @return FfmmegCommand\n   */\n\n\n  proto.nativeFramerate = proto.withNativeFramerate = proto.native = function () {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-re');\n\n    return this;\n  };\n  /**\n   * Specify input seek time for the last specified input\n   *\n   * @method FfmpegCommand#seekInput\n   * @category Input\n   * @aliases setStartTime,seekTo\n   *\n   * @param {String|Number} seek seek time in seconds or as a '[hh:[mm:]]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n\n\n  proto.setStartTime = proto.seekInput = function (seek) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-ss', seek);\n\n    return this;\n  };\n  /**\n   * Loop over the last specified input\n   *\n   * @method FfmpegCommand#loop\n   * @category Input\n   *\n   * @param {String|Number} [duration] loop duration in seconds or as a '[[hh:]mm:]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n\n\n  proto.loop = function (duration) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-loop', '1');\n\n    if (typeof duration !== 'undefined') {\n      this.duration(duration);\n    }\n\n    return this;\n  };\n};","map":{"version":3,"sources":["/Users/jonkim/my-app/node_modules/fluent-ffmpeg/lib/options/inputs.js"],"names":["utils","require","module","exports","proto","mergeAdd","addInput","input","source","isFile","isStream","readable","Error","hasInputStream","_inputs","some","pause","protocol","match","push","_currentInput","options","args","withInputFormat","inputFormat","fromFormat","format","withInputFps","withInputFPS","withFpsInput","withFPSInput","inputFPS","inputFps","fpsInput","FPSInput","fps","nativeFramerate","withNativeFramerate","native","setStartTime","seekInput","seek","loop","duration"],"mappings":"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","sourcesContent":["/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n/*\n *! Input-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Add an input to command\n   *\n   * Also switches \"current input\", that is the input that will be affected\n   * by subsequent input-related methods.\n   *\n   * Note: only one stream input is supported for now.\n   *\n   * @method FfmpegCommand#input\n   * @category Input\n   * @aliases mergeAdd,addInput\n   *\n   * @param {String|Readable} source input file path or readable stream\n   * @return FfmpegCommand\n   */\n  proto.mergeAdd =\n  proto.addInput =\n  proto.input = function(source) {\n    var isFile = false;\n    var isStream = false;\n\n    if (typeof source !== 'string') {\n      if (!('readable' in source) || !(source.readable)) {\n        throw new Error('Invalid input');\n      }\n\n      var hasInputStream = this._inputs.some(function(input) {\n        return input.isStream;\n      });\n\n      if (hasInputStream) {\n        throw new Error('Only one input stream is supported');\n      }\n\n      isStream = true;\n      source.pause();\n    } else {\n      var protocol = source.match(/^([a-z]{2,}):/i);\n      isFile = !protocol || protocol[0] === 'file';\n    }\n\n    this._inputs.push(this._currentInput = {\n      source: source,\n      isFile: isFile,\n      isStream: isStream,\n      options: utils.args()\n    });\n\n    return this;\n  };\n\n\n  /**\n   * Specify input format for the last specified input\n   *\n   * @method FfmpegCommand#inputFormat\n   * @category Input\n   * @aliases withInputFormat,fromFormat\n   *\n   * @param {String} format input format\n   * @return FfmpegCommand\n   */\n  proto.withInputFormat =\n  proto.inputFormat =\n  proto.fromFormat = function(format) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-f', format);\n    return this;\n  };\n\n\n  /**\n   * Specify input FPS for the last specified input\n   * (only valid for raw video formats)\n   *\n   * @method FfmpegCommand#inputFps\n   * @category Input\n   * @aliases withInputFps,withInputFPS,withFpsInput,withFPSInput,inputFPS,inputFps,fpsInput\n   *\n   * @param {Number} fps input FPS\n   * @return FfmpegCommand\n   */\n  proto.withInputFps =\n  proto.withInputFPS =\n  proto.withFpsInput =\n  proto.withFPSInput =\n  proto.inputFPS =\n  proto.inputFps =\n  proto.fpsInput =\n  proto.FPSInput = function(fps) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-r', fps);\n    return this;\n  };\n\n\n  /**\n   * Use native framerate for the last specified input\n   *\n   * @method FfmpegCommand#native\n   * @category Input\n   * @aliases nativeFramerate,withNativeFramerate\n   *\n   * @return FfmmegCommand\n   */\n  proto.nativeFramerate =\n  proto.withNativeFramerate =\n  proto.native = function() {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-re');\n    return this;\n  };\n\n\n  /**\n   * Specify input seek time for the last specified input\n   *\n   * @method FfmpegCommand#seekInput\n   * @category Input\n   * @aliases setStartTime,seekTo\n   *\n   * @param {String|Number} seek seek time in seconds or as a '[hh:[mm:]]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.setStartTime =\n  proto.seekInput = function(seek) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-ss', seek);\n\n    return this;\n  };\n\n\n  /**\n   * Loop over the last specified input\n   *\n   * @method FfmpegCommand#loop\n   * @category Input\n   *\n   * @param {String|Number} [duration] loop duration in seconds or as a '[[hh:]mm:]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.loop = function(duration) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-loop', '1');\n\n    if (typeof duration !== 'undefined') {\n      this.duration(duration);\n    }\n\n    return this;\n  };\n};\n"]},"metadata":{},"sourceType":"script"}