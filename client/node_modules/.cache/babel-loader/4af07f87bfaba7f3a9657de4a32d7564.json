{"ast":null,"code":"/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n/*\n *! Output-related methods\n */\n\n\nmodule.exports = function (proto) {\n  /**\n   * Add output\n   *\n   * @method FfmpegCommand#output\n   * @category Output\n   * @aliases addOutput\n   *\n   * @param {String|Writable} target target file path or writable stream\n   * @param {Object} [pipeopts={}] pipe options (only applies to streams)\n   * @return FfmpegCommand\n   */\n  proto.addOutput = proto.output = function (target, pipeopts) {\n    var isFile = false;\n\n    if (!target && this._currentOutput) {\n      // No target is only allowed when called from constructor\n      throw new Error('Invalid output');\n    }\n\n    if (target && typeof target !== 'string') {\n      if (!('writable' in target) || !target.writable) {\n        throw new Error('Invalid output');\n      }\n    } else if (typeof target === 'string') {\n      var protocol = target.match(/^([a-z]{2,}):/i);\n      isFile = !protocol || protocol[0] === 'file';\n    }\n\n    if (target && !('target' in this._currentOutput)) {\n      // For backwards compatibility, set target for first output\n      this._currentOutput.target = target;\n      this._currentOutput.isFile = isFile;\n      this._currentOutput.pipeopts = pipeopts || {};\n    } else {\n      if (target && typeof target !== 'string') {\n        var hasOutputStream = this._outputs.some(function (output) {\n          return typeof output.target !== 'string';\n        });\n\n        if (hasOutputStream) {\n          throw new Error('Only one output stream is supported');\n        }\n      }\n\n      this._outputs.push(this._currentOutput = {\n        target: target,\n        isFile: isFile,\n        flags: {},\n        pipeopts: pipeopts || {}\n      });\n\n      var self = this;\n      ['audio', 'audioFilters', 'video', 'videoFilters', 'sizeFilters', 'options'].forEach(function (key) {\n        self._currentOutput[key] = utils.args();\n      });\n\n      if (!target) {\n        // Call from constructor: remove target key\n        delete this._currentOutput.target;\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Specify output seek time\n   *\n   * @method FfmpegCommand#seek\n   * @category Input\n   * @aliases seekOutput\n   *\n   * @param {String|Number} seek seek time in seconds or as a '[hh:[mm:]]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n\n\n  proto.seekOutput = proto.seek = function (seek) {\n    this._currentOutput.options('-ss', seek);\n\n    return this;\n  };\n  /**\n   * Set output duration\n   *\n   * @method FfmpegCommand#duration\n   * @category Output\n   * @aliases withDuration,setDuration\n   *\n   * @param {String|Number} duration duration in seconds or as a '[[hh:]mm:]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n\n\n  proto.withDuration = proto.setDuration = proto.duration = function (duration) {\n    this._currentOutput.options('-t', duration);\n\n    return this;\n  };\n  /**\n   * Set output format\n   *\n   * @method FfmpegCommand#format\n   * @category Output\n   * @aliases toFormat,withOutputFormat,outputFormat\n   *\n   * @param {String} format output format name\n   * @return FfmpegCommand\n   */\n\n\n  proto.toFormat = proto.withOutputFormat = proto.outputFormat = proto.format = function (format) {\n    this._currentOutput.options('-f', format);\n\n    return this;\n  };\n  /**\n   * Add stream mapping to output\n   *\n   * @method FfmpegCommand#map\n   * @category Output\n   *\n   * @param {String} spec stream specification string, with optional square brackets\n   * @return FfmpegCommand\n   */\n\n\n  proto.map = function (spec) {\n    this._currentOutput.options('-map', spec.replace(utils.streamRegexp, '[$1]'));\n\n    return this;\n  };\n  /**\n   * Run flvtool2/flvmeta on output\n   *\n   * @method FfmpegCommand#flvmeta\n   * @category Output\n   * @aliases updateFlvMetadata\n   *\n   * @return FfmpegCommand\n   */\n\n\n  proto.updateFlvMetadata = proto.flvmeta = function () {\n    this._currentOutput.flags.flvmeta = true;\n    return this;\n  };\n};","map":{"version":3,"sources":["/Users/jonkim/my-app/node_modules/fluent-ffmpeg/lib/options/output.js"],"names":["utils","require","module","exports","proto","addOutput","output","target","pipeopts","isFile","_currentOutput","Error","writable","protocol","match","hasOutputStream","_outputs","some","push","flags","self","forEach","key","args","seekOutput","seek","options","withDuration","setDuration","duration","toFormat","withOutputFormat","outputFormat","format","map","spec","replace","streamRegexp","updateFlvMetadata","flvmeta"],"mappings":"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","sourcesContent":["/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n\n/*\n *! Output-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Add output\n   *\n   * @method FfmpegCommand#output\n   * @category Output\n   * @aliases addOutput\n   *\n   * @param {String|Writable} target target file path or writable stream\n   * @param {Object} [pipeopts={}] pipe options (only applies to streams)\n   * @return FfmpegCommand\n   */\n  proto.addOutput =\n  proto.output = function(target, pipeopts) {\n    var isFile = false;\n\n    if (!target && this._currentOutput) {\n      // No target is only allowed when called from constructor\n      throw new Error('Invalid output');\n    }\n\n    if (target && typeof target !== 'string') {\n      if (!('writable' in target) || !(target.writable)) {\n        throw new Error('Invalid output');\n      }\n    } else if (typeof target === 'string') {\n      var protocol = target.match(/^([a-z]{2,}):/i);\n      isFile = !protocol || protocol[0] === 'file';\n    }\n\n    if (target && !('target' in this._currentOutput)) {\n      // For backwards compatibility, set target for first output\n      this._currentOutput.target = target;\n      this._currentOutput.isFile = isFile;\n      this._currentOutput.pipeopts = pipeopts || {};\n    } else {\n      if (target && typeof target !== 'string') {\n        var hasOutputStream = this._outputs.some(function(output) {\n          return typeof output.target !== 'string';\n        });\n\n        if (hasOutputStream) {\n          throw new Error('Only one output stream is supported');\n        }\n      }\n\n      this._outputs.push(this._currentOutput = {\n        target: target,\n        isFile: isFile,\n        flags: {},\n        pipeopts: pipeopts || {}\n      });\n\n      var self = this;\n      ['audio', 'audioFilters', 'video', 'videoFilters', 'sizeFilters', 'options'].forEach(function(key) {\n        self._currentOutput[key] = utils.args();\n      });\n\n      if (!target) {\n        // Call from constructor: remove target key\n        delete this._currentOutput.target;\n      }\n    }\n\n    return this;\n  };\n\n\n  /**\n   * Specify output seek time\n   *\n   * @method FfmpegCommand#seek\n   * @category Input\n   * @aliases seekOutput\n   *\n   * @param {String|Number} seek seek time in seconds or as a '[hh:[mm:]]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.seekOutput =\n  proto.seek = function(seek) {\n    this._currentOutput.options('-ss', seek);\n    return this;\n  };\n\n\n  /**\n   * Set output duration\n   *\n   * @method FfmpegCommand#duration\n   * @category Output\n   * @aliases withDuration,setDuration\n   *\n   * @param {String|Number} duration duration in seconds or as a '[[hh:]mm:]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.withDuration =\n  proto.setDuration =\n  proto.duration = function(duration) {\n    this._currentOutput.options('-t', duration);\n    return this;\n  };\n\n\n  /**\n   * Set output format\n   *\n   * @method FfmpegCommand#format\n   * @category Output\n   * @aliases toFormat,withOutputFormat,outputFormat\n   *\n   * @param {String} format output format name\n   * @return FfmpegCommand\n   */\n  proto.toFormat =\n  proto.withOutputFormat =\n  proto.outputFormat =\n  proto.format = function(format) {\n    this._currentOutput.options('-f', format);\n    return this;\n  };\n\n\n  /**\n   * Add stream mapping to output\n   *\n   * @method FfmpegCommand#map\n   * @category Output\n   *\n   * @param {String} spec stream specification string, with optional square brackets\n   * @return FfmpegCommand\n   */\n  proto.map = function(spec) {\n    this._currentOutput.options('-map', spec.replace(utils.streamRegexp, '[$1]'));\n    return this;\n  };\n\n\n  /**\n   * Run flvtool2/flvmeta on output\n   *\n   * @method FfmpegCommand#flvmeta\n   * @category Output\n   * @aliases updateFlvMetadata\n   *\n   * @return FfmpegCommand\n   */\n  proto.updateFlvMetadata =\n  proto.flvmeta = function() {\n    this._currentOutput.flags.flvmeta = true;\n    return this;\n  };\n};\n"]},"metadata":{},"sourceType":"script"}