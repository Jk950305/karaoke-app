{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass Queue {\n  /**\n   * A really simple queue with concurrency.\n   */\n  constructor(worker, options = {}) {\n    this._worker = worker;\n    this._concurrency = options.concurrency || 1;\n    this.tasks = [];\n    this.total = 0;\n    this.active = 0;\n  }\n  /**\n   * Push a task to the queue.\n   */\n\n\n  push(item, callback) {\n    this.tasks.push({\n      item,\n      callback\n    });\n    this.total++;\n\n    this._next();\n  }\n  /**\n   * Process next job in queue.\n   */\n\n\n  _next() {\n    if (this.active >= this._concurrency || !this.tasks.length) {\n      return;\n    }\n\n    const {\n      item,\n      callback\n    } = this.tasks.shift();\n    let callbackCalled = false;\n    this.active++;\n\n    this._worker(item, (err, result) => {\n      if (callbackCalled) {\n        return;\n      }\n\n      this.active--;\n      callbackCalled = true;\n\n      if (callback) {\n        callback(err, result);\n      }\n\n      this._next();\n    });\n  }\n  /**\n   * Stops processing queued jobs.\n   */\n\n\n  die() {\n    this.tasks = [];\n  }\n\n}\n\nexports.default = Queue;","map":{"version":3,"sources":["../src/queue.ts"],"names":[],"mappings":";;;;;;AAMA,MAAqB,KAArB,CAA0B;AAOxB;;AAEG;AACH,EAAA,WAAA,CAAY,MAAZ,EAAuD,OAAA,GAAoC,EAA3F,EAA6F;AAC3F,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,YAAL,GAAoB,OAAO,CAAC,WAAR,IAAuB,CAA3C;AACA,SAAK,KAAL,GAAa,EAAb;AACA,SAAK,KAAL,GAAa,CAAb;AACA,SAAK,MAAL,GAAc,CAAd;AACD;AAGD;;AAEG;;;AACH,EAAA,IAAI,CAAC,IAAD,EAAY,QAAZ,EAA+B;AACjC,SAAK,KAAL,CAAW,IAAX,CAAgB;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,KAAhB;AACA,SAAK,KAAL;;AACA,SAAK,KAAL;AACD;AAGD;;AAEG;;;AACH,EAAA,KAAK,GAAA;AACH,QAAI,KAAK,MAAL,IAAe,KAAK,YAApB,IAAoC,CAAC,KAAK,KAAL,CAAW,MAApD,EAA4D;AAAE;AAAS;;AACvE,UAAM;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,QAAqB,KAAK,KAAL,CAAW,KAAX,EAA3B;AACA,QAAI,cAAc,GAAG,KAArB;AACA,SAAK,MAAL;;AACA,SAAK,OAAL,CAAa,IAAb,EAAmB,CAAC,GAAD,EAAM,MAAN,KAAgB;AACjC,UAAI,cAAJ,EAAoB;AAAE;AAAS;;AAC/B,WAAK,MAAL;AACA,MAAA,cAAc,GAAG,IAAjB;;AACA,UAAI,QAAJ,EAAc;AAAE,QAAA,QAAQ,CAAC,GAAD,EAAM,MAAN,CAAR;AAAwB;;AACxC,WAAK,KAAL;AACD,KAND;AAOD;AAGD;;AAEG;;;AACH,EAAA,GAAG,GAAA;AACD,SAAK,KAAL,GAAa,EAAb;AACD;;AApDuB;;AAA1B,OAAA,CAAA,OAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Queue {\n    /**\n     * A really simple queue with concurrency.\n     */\n    constructor(worker, options = {}) {\n        this._worker = worker;\n        this._concurrency = options.concurrency || 1;\n        this.tasks = [];\n        this.total = 0;\n        this.active = 0;\n    }\n    /**\n     * Push a task to the queue.\n     */\n    push(item, callback) {\n        this.tasks.push({ item, callback });\n        this.total++;\n        this._next();\n    }\n    /**\n     * Process next job in queue.\n     */\n    _next() {\n        if (this.active >= this._concurrency || !this.tasks.length) {\n            return;\n        }\n        const { item, callback } = this.tasks.shift();\n        let callbackCalled = false;\n        this.active++;\n        this._worker(item, (err, result) => {\n            if (callbackCalled) {\n                return;\n            }\n            this.active--;\n            callbackCalled = true;\n            if (callback) {\n                callback(err, result);\n            }\n            this._next();\n        });\n    }\n    /**\n     * Stops processing queued jobs.\n     */\n    die() {\n        this.tasks = [];\n    }\n}\nexports.default = Queue;\n//# sourceMappingURL=queue.js.map"]},"metadata":{},"sourceType":"script"}