{"ast":null,"code":"/** TAKEN FROM: https://github.com/fent/node-m3u8stream/blob/master/src/parse-time.ts\n *  TYPES HAVE BEEN STRIPPED\n * \n * Converts human friendly time to milliseconds. Supports the format\n * 00:00:00.000 for hours, minutes, seconds, and milliseconds respectively.\n * And 0ms, 0s, 0m, 0h, and together 1m1s.\n * \n * \n * @param {string|number} time\n * @return {number}\n */\nconst humanStr = time => {\n  const numberFormat = /^\\d+$/;\n  const timeFormat = /^(?:(?:(\\d+):)?(\\d{1,2}):)?(\\d{1,2})(?:\\.(\\d{3}))?$/;\n  const timeUnits = {\n    ms: 1,\n    s: 1000,\n    m: 60000,\n    h: 3600000\n  };\n\n  if (typeof time === 'number') {\n    return time;\n  }\n\n  if (numberFormat.test(time)) {\n    return +time;\n  }\n\n  const firstFormat = timeFormat.exec(time);\n\n  if (firstFormat) {\n    return +(firstFormat[1] || 0) * timeUnits.h + +(firstFormat[2] || 0) * timeUnits.m + +firstFormat[3] * timeUnits.s + +(firstFormat[4] || 0);\n  } else {\n    let total = 0;\n    const r = /(-?\\d+)(ms|s|m|h)/g;\n    let rs;\n\n    while ((rs = r.exec(time)) != null) {\n      total += +rs[1] * timeUnits[rs[2]];\n    }\n\n    return total;\n  }\n};\n\nexports.parseTimestamp = humanStr;","map":{"version":3,"sources":["/Users/jonkim/my-app/node_modules/react-native-ytdl/lib/__REACT_NATIVE_YTDL_CUSTOM_MODULES__/m3u8stream/index.js"],"names":["humanStr","time","numberFormat","timeFormat","timeUnits","ms","s","m","h","test","firstFormat","exec","total","r","rs","exports","parseTimestamp"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAIC,IAAD,IAAU;AACzB,QAAMC,YAAY,GAAG,OAArB;AACA,QAAMC,UAAU,GAAG,qDAAnB;AACA,QAAMC,SAAS,GAAG;AAChBC,IAAAA,EAAE,EAAE,CADY;AAEhBC,IAAAA,CAAC,EAAE,IAFa;AAGhBC,IAAAA,CAAC,EAAE,KAHa;AAIhBC,IAAAA,CAAC,EAAE;AAJa,GAAlB;;AAOA,MAAI,OAAOP,IAAP,KAAgB,QAApB,EAA8B;AAAE,WAAOA,IAAP;AAAc;;AAC9C,MAAIC,YAAY,CAACO,IAAb,CAAkBR,IAAlB,CAAJ,EAA6B;AAAE,WAAO,CAACA,IAAR;AAAe;;AAC9C,QAAMS,WAAW,GAAGP,UAAU,CAACQ,IAAX,CAAgBV,IAAhB,CAApB;;AACA,MAAIS,WAAJ,EAAiB;AACf,WAAO,EAAEA,WAAW,CAAC,CAAD,CAAX,IAAkB,CAApB,IAAyBN,SAAS,CAACI,CAAnC,GACL,EAAEE,WAAW,CAAC,CAAD,CAAX,IAAkB,CAApB,IAAyBN,SAAS,CAACG,CAD9B,GAEL,CAACG,WAAW,CAAC,CAAD,CAAZ,GAAkBN,SAAS,CAACE,CAFvB,GAGL,EAAEI,WAAW,CAAC,CAAD,CAAX,IAAkB,CAApB,CAHF;AAID,GALD,MAKO;AACL,QAAIE,KAAK,GAAG,CAAZ;AACA,UAAMC,CAAC,GAAG,oBAAV;AACA,QAAIC,EAAJ;;AACA,WAAO,CAACA,EAAE,GAAGD,CAAC,CAACF,IAAF,CAAOV,IAAP,CAAN,KAAuB,IAA9B,EAAoC;AAClCW,MAAAA,KAAK,IAAI,CAACE,EAAE,CAAC,CAAD,CAAH,GAASV,SAAS,CAACU,EAAE,CAAC,CAAD,CAAH,CAA3B;AACD;;AACD,WAAOF,KAAP;AACD;AACF,CA3BD;;AA6BAG,OAAO,CAACC,cAAR,GAAyBhB,QAAzB","sourcesContent":["/** TAKEN FROM: https://github.com/fent/node-m3u8stream/blob/master/src/parse-time.ts\n *  TYPES HAVE BEEN STRIPPED\n * \n * Converts human friendly time to milliseconds. Supports the format\n * 00:00:00.000 for hours, minutes, seconds, and milliseconds respectively.\n * And 0ms, 0s, 0m, 0h, and together 1m1s.\n * \n * \n * @param {string|number} time\n * @return {number}\n */\nconst humanStr = (time) => {\n  const numberFormat = /^\\d+$/;\n  const timeFormat = /^(?:(?:(\\d+):)?(\\d{1,2}):)?(\\d{1,2})(?:\\.(\\d{3}))?$/;\n  const timeUnits = {\n    ms: 1,\n    s: 1000,\n    m: 60000,\n    h: 3600000,\n  };\n\n  if (typeof time === 'number') { return time; }\n  if (numberFormat.test(time)) { return +time; }\n  const firstFormat = timeFormat.exec(time);\n  if (firstFormat) {\n    return +(firstFormat[1] || 0) * timeUnits.h +\n      +(firstFormat[2] || 0) * timeUnits.m +\n      +firstFormat[3] * timeUnits.s +\n      +(firstFormat[4] || 0);\n  } else {\n    let total = 0;\n    const r = /(-?\\d+)(ms|s|m|h)/g;\n    let rs;\n    while ((rs = r.exec(time)) != null) {\n      total += +rs[1] * timeUnits[rs[2]];\n    }\n    return total;\n  }\n};\n\nexports.parseTimestamp = humanStr;"]},"metadata":{},"sourceType":"script"}