{"ast":null,"code":"const {\n  SimpleFilter,\n  SoundTouch\n} = require('../vendor/soundtouch');\n\nconst BUFFER_SIZE = 4096;\n\nclass AudioPlayer {\n  constructor({\n    emitter,\n    pitch,\n    tempo\n  }) {\n    this.emitter = emitter;\n    this.context = new AudioContext();\n    this.scriptProcessor = this.context.createScriptProcessor(BUFFER_SIZE, 2, 2);\n\n    this.scriptProcessor.onaudioprocess = e => {\n      const l = e.outputBuffer.getChannelData(0);\n      const r = e.outputBuffer.getChannelData(1);\n      const framesExtracted = this.simpleFilter.extract(this.samples, BUFFER_SIZE);\n\n      if (framesExtracted === 0) {\n        this.emitter.emit('stop');\n      }\n\n      for (let i = 0; i < framesExtracted; i++) {\n        l[i] = this.samples[i * 2];\n        r[i] = this.samples[i * 2 + 1];\n      }\n    };\n\n    this.soundTouch = new SoundTouch();\n    this.soundTouch.pitch = pitch;\n    this.soundTouch.tempo = tempo;\n    this.duration = undefined;\n  }\n\n  get pitch() {\n    return this.soundTouch.pitch;\n  }\n\n  set pitch(pitch) {\n    this.soundTouch.pitch = pitch;\n  }\n\n  get tempo() {\n    return this.soundTouch.tempo;\n  }\n\n  set tempo(tempo) {\n    this.soundTouch.tempo = tempo;\n  }\n\n  decodeAudioData(data) {\n    return this.context.decodeAudioData(data);\n  }\n\n  setBuffer(buffer) {\n    const bufferSource = this.context.createBufferSource();\n    bufferSource.buffer = buffer;\n    this.samples = new Float32Array(BUFFER_SIZE * 2);\n    this.source = {\n      extract: (target, numFrames, position) => {\n        this.emitter.emit('state', {\n          t: position / this.context.sampleRate\n        });\n        const l = buffer.getChannelData(0);\n        const r = buffer.getChannelData(1);\n\n        for (let i = 0; i < numFrames; i++) {\n          target[i * 2] = l[i + position];\n          target[i * 2 + 1] = r[i + position];\n        }\n\n        return Math.min(numFrames, l.length - position);\n      }\n    };\n    this.simpleFilter = new SimpleFilter(this.source, this.soundTouch);\n    this.duration = buffer.duration;\n    this.emitter.emit('state', {\n      duration: buffer.duration\n    });\n  }\n\n  play() {\n    this.scriptProcessor.connect(this.context.destination);\n  }\n\n  pause() {\n    this.scriptProcessor.disconnect(this.context.destination);\n  }\n\n  seekPercent(percent) {\n    if (this.simpleFilter !== undefined) {\n      this.simpleFilter.sourcePosition = Math.round(percent / 100 * this.duration * this.context.sampleRate);\n    }\n  }\n\n}\n\nmodule.exports = AudioPlayer;","map":{"version":3,"sources":["/Users/jonkim/my-app/src/lib/AudioPlayer.js"],"names":["SimpleFilter","SoundTouch","require","BUFFER_SIZE","AudioPlayer","constructor","emitter","pitch","tempo","context","AudioContext","scriptProcessor","createScriptProcessor","onaudioprocess","e","l","outputBuffer","getChannelData","r","framesExtracted","simpleFilter","extract","samples","emit","i","soundTouch","duration","undefined","decodeAudioData","data","setBuffer","buffer","bufferSource","createBufferSource","Float32Array","source","target","numFrames","position","t","sampleRate","Math","min","length","play","connect","destination","pause","disconnect","seekPercent","percent","sourcePosition","round","module","exports"],"mappings":"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","sourcesContent":["const {SimpleFilter, SoundTouch} = require('../vendor/soundtouch');\n\nconst BUFFER_SIZE = 4096;\n\nclass AudioPlayer {\n    constructor({emitter, pitch, tempo}) {\n        this.emitter = emitter;\n\n        this.context = new AudioContext();\n        this.scriptProcessor = this.context.createScriptProcessor(BUFFER_SIZE, 2, 2);\n        this.scriptProcessor.onaudioprocess = e => {\n            const l = e.outputBuffer.getChannelData(0);\n            const r = e.outputBuffer.getChannelData(1);\n            const framesExtracted = this.simpleFilter.extract(this.samples, BUFFER_SIZE);\n            if (framesExtracted === 0) {\n                this.emitter.emit('stop');\n            }\n            for (let i = 0; i < framesExtracted; i++) {\n                l[i] = this.samples[i * 2];\n                r[i] = this.samples[i * 2 + 1];\n            }\n        };\n\n        this.soundTouch = new SoundTouch();\n        this.soundTouch.pitch = pitch;\n        this.soundTouch.tempo = tempo;\n\n        this.duration = undefined;\n    }\n\n    get pitch() {\n        return this.soundTouch.pitch;\n    }\n    set pitch(pitch) {\n        this.soundTouch.pitch = pitch;\n    }\n\n    get tempo() {\n        return this.soundTouch.tempo;\n    }\n    set tempo(tempo) {\n        this.soundTouch.tempo = tempo;\n    }\n\n    decodeAudioData(data) {\n        return this.context.decodeAudioData(data);\n    }\n\n    setBuffer(buffer) {\n        const bufferSource = this.context.createBufferSource();\n        bufferSource.buffer = buffer;\n\n        this.samples = new Float32Array(BUFFER_SIZE * 2);\n        this.source = {\n            extract: (target, numFrames, position) => {\n                this.emitter.emit('state', {t: position / this.context.sampleRate});\n                const l = buffer.getChannelData(0);\n                const r = buffer.getChannelData(1);\n                for (let i = 0; i < numFrames; i++) {\n                    target[i * 2] = l[i + position];\n                    target[i * 2 + 1] = r[i + position];\n                }\n                return Math.min(numFrames, l.length - position);\n            },\n        };\n        this.simpleFilter = new SimpleFilter(this.source, this.soundTouch);\n\n        this.duration = buffer.duration;\n        this.emitter.emit('state', {duration: buffer.duration});\n    }\n\n    play() {\n        this.scriptProcessor.connect(this.context.destination);\n    }\n\n    pause() {\n        this.scriptProcessor.disconnect(this.context.destination);\n    }\n\n    seekPercent(percent) {\n        if (this.simpleFilter !== undefined) {\n            this.simpleFilter.sourcePosition = Math.round(\n                percent / 100 * this.duration * this.context.sampleRate\n            );\n        }\n    }\n}\n\nmodule.exports = AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}