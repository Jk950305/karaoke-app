{"ast":null,"code":"const utils = require('./utils');\n\nconst qs = require('querystring');\n\nconst urllib = require('url');\n\nconst {\n  parseTimestamp\n} = require(\"./__REACT_NATIVE_YTDL_CUSTOM_MODULES__/m3u8stream\");\n\nconst VIDEO_URL = 'https://www.youtube.com/watch?v=';\nconst TITLE_TO_CATEGORY = {\n  song: {\n    name: 'Music',\n    url: 'https://music.youtube.com/'\n  }\n};\n\nconst getText = obj => obj ? obj.runs ? obj.runs[0].text : obj.simpleText : null;\n/**\n * Get video media.\n *\n * @param {Object} info\n * @returns {Object}\n */\n\n\nexports.getMedia = info => {\n  let media = {};\n  let results = [];\n\n  try {\n    results = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n  } catch (err) {// Do nothing\n  }\n\n  let result = results.find(v => v.videoSecondaryInfoRenderer);\n\n  if (!result) {\n    return {};\n  }\n\n  try {\n    let metadataRows = (result.metadataRowContainer || result.videoSecondaryInfoRenderer.metadataRowContainer).metadataRowContainerRenderer.rows;\n\n    for (let row of metadataRows) {\n      if (row.metadataRowRenderer) {\n        let title = getText(row.metadataRowRenderer.title).toLowerCase();\n        let contents = row.metadataRowRenderer.contents[0];\n        media[title] = getText(contents);\n        let runs = contents.runs;\n\n        if (runs && runs[0].navigationEndpoint) {\n          media[`${title}_url`] = urllib.resolve(VIDEO_URL, runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url);\n        }\n\n        if (title in TITLE_TO_CATEGORY) {\n          media.category = TITLE_TO_CATEGORY[title].name;\n          media.category_url = TITLE_TO_CATEGORY[title].url;\n        }\n      } else if (row.richMetadataRowRenderer) {\n        let contents = row.richMetadataRowRenderer.contents;\n        let boxArt = contents.filter(meta => meta.richMetadataRenderer.style === 'RICH_METADATA_RENDERER_STYLE_BOX_ART');\n\n        for (let {\n          richMetadataRenderer\n        } of boxArt) {\n          let meta = richMetadataRenderer;\n          media.year = getText(meta.subtitle);\n          let type = getText(meta.callToAction).split(' ')[1];\n          media[type] = getText(meta.title);\n          media[`${type}_url`] = urllib.resolve(VIDEO_URL, meta.endpoint.commandMetadata.webCommandMetadata.url);\n          media.thumbnails = meta.thumbnail.thumbnails;\n        }\n\n        let topic = contents.filter(meta => meta.richMetadataRenderer.style === 'RICH_METADATA_RENDERER_STYLE_TOPIC');\n\n        for (let {\n          richMetadataRenderer\n        } of topic) {\n          let meta = richMetadataRenderer;\n          media.category = getText(meta.title);\n          media.category_url = urllib.resolve(VIDEO_URL, meta.endpoint.commandMetadata.webCommandMetadata.url);\n        }\n      }\n    }\n  } catch (err) {// Do nothing.\n  }\n\n  return media;\n};\n\nconst isVerified = badges => !!(badges && badges.find(b => b.metadataBadgeRenderer.tooltip === 'Verified'));\n/**\n * Get video author.\n *\n * @param {Object} info\n * @returns {Object}\n */\n\n\nexports.getAuthor = info => {\n  let channelId,\n      thumbnails = [],\n      subscriberCount,\n      verified = false;\n\n  try {\n    let results = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n    let v = results.find(v2 => v2.videoSecondaryInfoRenderer && v2.videoSecondaryInfoRenderer.owner && v2.videoSecondaryInfoRenderer.owner.videoOwnerRenderer);\n    let videoOwnerRenderer = v.videoSecondaryInfoRenderer.owner.videoOwnerRenderer;\n    channelId = videoOwnerRenderer.navigationEndpoint.browseEndpoint.browseId;\n    thumbnails = videoOwnerRenderer.thumbnail.thumbnails.map(thumbnail => {\n      thumbnail.url = urllib.resolve(VIDEO_URL, thumbnail.url);\n      return thumbnail;\n    });\n    subscriberCount = utils.parseAbbreviatedNumber(getText(videoOwnerRenderer.subscriberCountText));\n    verified = isVerified(videoOwnerRenderer.badges);\n  } catch (err) {// Do nothing.\n  }\n\n  try {\n    let videoDetails = info.player_response.microformat && info.player_response.microformat.playerMicroformatRenderer;\n    let id = videoDetails && videoDetails.channelId || channelId || info.player_response.videoDetails.channelId;\n    let author = {\n      id: id,\n      name: videoDetails ? videoDetails.ownerChannelName : info.player_response.videoDetails.author,\n      user: videoDetails ? videoDetails.ownerProfileUrl.split('/').slice(-1)[0] : null,\n      channel_url: `https://www.youtube.com/channel/${id}`,\n      external_channel_url: videoDetails ? `https://www.youtube.com/channel/${videoDetails.externalChannelId}` : '',\n      user_url: videoDetails ? urllib.resolve(VIDEO_URL, videoDetails.ownerProfileUrl) : '',\n      thumbnails,\n      verified,\n      subscriber_count: subscriberCount\n    };\n\n    if (thumbnails.length) {\n      utils.deprecate(author, 'avatar', author.thumbnails[0].url, 'author.avatar', 'author.thumbnails[0].url');\n    }\n\n    return author;\n  } catch (err) {\n    return {};\n  }\n};\n/**\n * Get related videos.\n *\n * @param {Object} info\n * @returns {Array.<Object>}\n */\n\n\nexports.getRelatedVideos = info => {\n  let rvsParams = [],\n      secondaryResults = [];\n\n  try {\n    rvsParams = info.response.webWatchNextResponseExtensionData.relatedVideoArgs.split(',').map(e => qs.parse(e));\n  } catch (err) {// Do nothing.\n  }\n\n  try {\n    secondaryResults = info.response.contents.twoColumnWatchNextResults.secondaryResults.secondaryResults.results;\n  } catch (err) {\n    return [];\n  }\n\n  let videos = [];\n\n  for (let result of secondaryResults || []) {\n    let details = result.compactVideoRenderer;\n\n    if (details) {\n      try {\n        let viewCount = getText(details.viewCountText);\n        let shortViewCount = getText(details.shortViewCountText);\n        let rvsDetails = rvsParams.find(elem => elem.id === details.videoId);\n\n        if (!/^\\d/.test(shortViewCount)) {\n          shortViewCount = rvsDetails && rvsDetails.short_view_count_text || '';\n        }\n\n        viewCount = (/^\\d/.test(viewCount) ? viewCount : shortViewCount).split(' ')[0];\n        let browseEndpoint = details.shortBylineText.runs[0].navigationEndpoint.browseEndpoint;\n        let channelId = browseEndpoint.browseId;\n        let name = getText(details.shortBylineText);\n        let user = (browseEndpoint.canonicalBaseUrl || '').split('/').slice(-1)[0];\n        let video = {\n          id: details.videoId,\n          title: getText(details.title),\n          published: getText(details.publishedTimeText),\n          author: {\n            id: channelId,\n            name,\n            user,\n            channel_url: `https://www.youtube.com/channel/${channelId}`,\n            user_url: `https://www.youtube.com/user/${user}`,\n            thumbnails: details.channelThumbnail.thumbnails.map(thumbnail => {\n              thumbnail.url = urllib.resolve(VIDEO_URL, thumbnail.url);\n              return thumbnail;\n            }),\n            verified: isVerified(details.ownerBadges),\n\n            [Symbol.toPrimitive]() {\n              console.warn(`\\`relatedVideo.author\\` will be removed in a near future release, ` + `use \\`relatedVideo.author.name\\` instead.`);\n              return video.author.name;\n            }\n\n          },\n          short_view_count_text: shortViewCount.split(' ')[0],\n          view_count: viewCount.replace(/,/g, ''),\n          length_seconds: details.lengthText ? Math.floor(parseTimestamp(getText(details.lengthText)) / 1000) : rvsParams && `${rvsParams.length_seconds}`,\n          thumbnails: details.thumbnail.thumbnails,\n          isLive: !!(details.badges && details.badges.find(b => b.metadataBadgeRenderer.label === 'LIVE NOW'))\n        };\n        utils.deprecate(video, 'author_thumbnail', video.author.thumbnails[0].url, 'relatedVideo.author_thumbnail', 'relatedVideo.author.thumbnails[0].url');\n        utils.deprecate(video, 'ucid', video.author.id, 'relatedVideo.ucid', 'relatedVideo.author.id');\n        utils.deprecate(video, 'video_thumbnail', video.thumbnails[0].url, 'relatedVideo.video_thumbnail', 'relatedVideo.thumbnails[0].url');\n        videos.push(video);\n      } catch (err) {// Skip.\n      }\n    }\n  }\n\n  return videos;\n};\n/**\n * Get like count.\n *\n * @param {string} info\n * @returns {number}\n */\n\n\nexports.getLikes = info => {\n  try {\n    let contents = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n    let video = contents.find(r => r.videoPrimaryInfoRenderer);\n    let buttons = video.videoPrimaryInfoRenderer.videoActions.menuRenderer.topLevelButtons;\n    let like = buttons.find(b => b.toggleButtonRenderer && b.toggleButtonRenderer.defaultIcon.iconType === 'LIKE');\n    return parseInt(like.toggleButtonRenderer.defaultText.accessibility.accessibilityData.label.replace(/\\D+/g, ''));\n  } catch (err) {\n    return null;\n  }\n};\n/**\n * Get dislike count.\n *\n * @param {string} info\n * @returns {number}\n */\n\n\nexports.getDislikes = info => {\n  try {\n    let contents = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n    let video = contents.find(r => r.videoPrimaryInfoRenderer);\n    let buttons = video.videoPrimaryInfoRenderer.videoActions.menuRenderer.topLevelButtons;\n    let dislike = buttons.find(b => b.toggleButtonRenderer && b.toggleButtonRenderer.defaultIcon.iconType === 'DISLIKE');\n    return parseInt(dislike.toggleButtonRenderer.defaultText.accessibility.accessibilityData.label.replace(/\\D+/g, ''));\n  } catch (err) {\n    return null;\n  }\n};\n/**\n * Cleans up a few fields on `videoDetails`.\n *\n * @param {Object} videoDetails\n * @returns {Object}\n */\n\n\nexports.cleanVideoDetails = videoDetails => {\n  videoDetails.thumbnails = videoDetails.thumbnail.thumbnails;\n  delete videoDetails.thumbnail;\n  utils.deprecate(videoDetails, 'thumbnail', {\n    thumbnails: videoDetails.thumbnails\n  }, 'videoDetails.thumbnail.thumbnails', 'videoDetails.thumbnails');\n  videoDetails.description = videoDetails.shortDescription || getText(videoDetails.description);\n  delete videoDetails.shortDescription;\n  utils.deprecate(videoDetails, 'shortDescription', videoDetails.description, 'videoDetails.shortDescription', 'videoDetails.description');\n  return videoDetails;\n};","map":{"version":3,"sources":["/Users/jonkim/my-app/node_modules/react-native-ytdl/lib/info-extras.js"],"names":["utils","require","qs","urllib","parseTimestamp","VIDEO_URL","TITLE_TO_CATEGORY","song","name","url","getText","obj","runs","text","simpleText","exports","getMedia","info","media","results","response","contents","twoColumnWatchNextResults","err","result","find","v","videoSecondaryInfoRenderer","metadataRows","metadataRowContainer","metadataRowContainerRenderer","rows","row","metadataRowRenderer","title","toLowerCase","navigationEndpoint","resolve","commandMetadata","webCommandMetadata","category","category_url","richMetadataRowRenderer","boxArt","filter","meta","richMetadataRenderer","style","year","subtitle","type","callToAction","split","endpoint","thumbnails","thumbnail","topic","isVerified","badges","b","metadataBadgeRenderer","tooltip","getAuthor","channelId","subscriberCount","verified","v2","owner","videoOwnerRenderer","browseEndpoint","browseId","map","parseAbbreviatedNumber","subscriberCountText","videoDetails","player_response","microformat","playerMicroformatRenderer","id","author","ownerChannelName","user","ownerProfileUrl","slice","channel_url","external_channel_url","externalChannelId","user_url","subscriber_count","length","deprecate","getRelatedVideos","rvsParams","secondaryResults","webWatchNextResponseExtensionData","relatedVideoArgs","e","parse","videos","details","compactVideoRenderer","viewCount","viewCountText","shortViewCount","shortViewCountText","rvsDetails","elem","videoId","test","short_view_count_text","shortBylineText","canonicalBaseUrl","video","published","publishedTimeText","channelThumbnail","ownerBadges","Symbol","toPrimitive","console","warn","view_count","replace","length_seconds","lengthText","Math","floor","isLive","label","push","getLikes","r","videoPrimaryInfoRenderer","buttons","videoActions","menuRenderer","topLevelButtons","like","toggleButtonRenderer","defaultIcon","iconType","parseInt","defaultText","accessibility","accessibilityData","getDislikes","dislike","cleanVideoDetails","description","shortDescription"],"mappings":"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","sourcesContent":["const utils = require('./utils');\nconst qs = require('querystring');\nconst urllib = require('url');\nconst { parseTimestamp } = require(\"./__REACT_NATIVE_YTDL_CUSTOM_MODULES__/m3u8stream\");\n\n\nconst VIDEO_URL = 'https://www.youtube.com/watch?v=';\nconst TITLE_TO_CATEGORY = {\n  song: { name: 'Music', url: 'https://music.youtube.com/' },\n};\n\nconst getText = obj => obj ? obj.runs ? obj.runs[0].text : obj.simpleText : null;\n\n\n/**\n * Get video media.\n *\n * @param {Object} info\n * @returns {Object}\n */\nexports.getMedia = info => {\n  let media = {};\n  let results = [];\n  try {\n    results = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n  } catch (err) {\n    // Do nothing\n  }\n\n  let result = results.find(v => v.videoSecondaryInfoRenderer);\n  if (!result) { return {}; }\n\n  try {\n    let metadataRows =\n      (result.metadataRowContainer || result.videoSecondaryInfoRenderer.metadataRowContainer)\n        .metadataRowContainerRenderer.rows;\n    for (let row of metadataRows) {\n      if (row.metadataRowRenderer) {\n        let title = getText(row.metadataRowRenderer.title).toLowerCase();\n        let contents = row.metadataRowRenderer.contents[0];\n        media[title] = getText(contents);\n        let runs = contents.runs;\n        if (runs && runs[0].navigationEndpoint) {\n          media[`${title}_url`] = urllib.resolve(VIDEO_URL,\n            runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url);\n        }\n        if (title in TITLE_TO_CATEGORY) {\n          media.category = TITLE_TO_CATEGORY[title].name;\n          media.category_url = TITLE_TO_CATEGORY[title].url;\n        }\n      } else if (row.richMetadataRowRenderer) {\n        let contents = row.richMetadataRowRenderer.contents;\n        let boxArt = contents\n          .filter(meta => meta.richMetadataRenderer.style === 'RICH_METADATA_RENDERER_STYLE_BOX_ART');\n        for (let { richMetadataRenderer } of boxArt) {\n          let meta = richMetadataRenderer;\n          media.year = getText(meta.subtitle);\n          let type = getText(meta.callToAction).split(' ')[1];\n          media[type] = getText(meta.title);\n          media[`${type}_url`] = urllib.resolve(VIDEO_URL,\n            meta.endpoint.commandMetadata.webCommandMetadata.url);\n          media.thumbnails = meta.thumbnail.thumbnails;\n        }\n        let topic = contents\n          .filter(meta => meta.richMetadataRenderer.style === 'RICH_METADATA_RENDERER_STYLE_TOPIC');\n        for (let { richMetadataRenderer } of topic) {\n          let meta = richMetadataRenderer;\n          media.category = getText(meta.title);\n          media.category_url = urllib.resolve(VIDEO_URL,\n            meta.endpoint.commandMetadata.webCommandMetadata.url);\n        }\n      }\n    }\n  } catch (err) {\n    // Do nothing.\n  }\n\n  return media;\n};\n\n\nconst isVerified = badges => !!(badges && badges.find(b => b.metadataBadgeRenderer.tooltip === 'Verified'));\n\n\n/**\n * Get video author.\n *\n * @param {Object} info\n * @returns {Object}\n */\nexports.getAuthor = info => {\n  let channelId, thumbnails = [], subscriberCount, verified = false;\n  try {\n    let results = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n    let v = results.find(v2 =>\n      v2.videoSecondaryInfoRenderer &&\n      v2.videoSecondaryInfoRenderer.owner &&\n      v2.videoSecondaryInfoRenderer.owner.videoOwnerRenderer);\n    let videoOwnerRenderer = v.videoSecondaryInfoRenderer.owner.videoOwnerRenderer;\n    channelId = videoOwnerRenderer.navigationEndpoint.browseEndpoint.browseId;\n    thumbnails = videoOwnerRenderer.thumbnail.thumbnails.map(thumbnail => {\n      thumbnail.url = urllib.resolve(VIDEO_URL, thumbnail.url);\n      return thumbnail;\n    });\n    subscriberCount = utils.parseAbbreviatedNumber(getText(videoOwnerRenderer.subscriberCountText));\n    verified = isVerified(videoOwnerRenderer.badges);\n  } catch (err) {\n    // Do nothing.\n  }\n  try {\n    let videoDetails = info.player_response.microformat && info.player_response.microformat.playerMicroformatRenderer;\n    let id = (videoDetails && videoDetails.channelId) || channelId || info.player_response.videoDetails.channelId;\n    let author = {\n      id: id,\n      name: videoDetails ? videoDetails.ownerChannelName : info.player_response.videoDetails.author,\n      user: videoDetails ? videoDetails.ownerProfileUrl.split('/').slice(-1)[0] : null,\n      channel_url: `https://www.youtube.com/channel/${id}`,\n      external_channel_url: videoDetails ? `https://www.youtube.com/channel/${videoDetails.externalChannelId}` : '',\n      user_url: videoDetails ? urllib.resolve(VIDEO_URL, videoDetails.ownerProfileUrl) : '',\n      thumbnails,\n      verified,\n      subscriber_count: subscriberCount,\n    };\n    if (thumbnails.length) {\n      utils.deprecate(author, 'avatar', author.thumbnails[0].url, 'author.avatar', 'author.thumbnails[0].url');\n    }\n    return author;\n  } catch (err) {\n    return {};\n  }\n};\n\n/**\n * Get related videos.\n *\n * @param {Object} info\n * @returns {Array.<Object>}\n */\nexports.getRelatedVideos = info => {\n  let rvsParams = [], secondaryResults = [];\n  try {\n    rvsParams = info.response.webWatchNextResponseExtensionData.relatedVideoArgs.split(',').map(e => qs.parse(e));\n  } catch (err) {\n    // Do nothing.\n  }\n  try {\n    secondaryResults = info.response.contents.twoColumnWatchNextResults.secondaryResults.secondaryResults.results;\n  } catch (err) {\n    return [];\n  }\n  let videos = [];\n  for (let result of secondaryResults || []) {\n    let details = result.compactVideoRenderer;\n    if (details) {\n      try {\n        let viewCount = getText(details.viewCountText);\n        let shortViewCount = getText(details.shortViewCountText);\n        let rvsDetails = rvsParams.find(elem => elem.id === details.videoId);\n        if (!/^\\d/.test(shortViewCount)) {\n          shortViewCount = (rvsDetails && rvsDetails.short_view_count_text) || '';\n        }\n        viewCount = (/^\\d/.test(viewCount) ? viewCount : shortViewCount).split(' ')[0];\n        let browseEndpoint = details.shortBylineText.runs[0].navigationEndpoint.browseEndpoint;\n        let channelId = browseEndpoint.browseId;\n        let name = getText(details.shortBylineText);\n        let user = (browseEndpoint.canonicalBaseUrl || '').split('/').slice(-1)[0];\n        let video = {\n          id: details.videoId,\n          title: getText(details.title),\n          published: getText(details.publishedTimeText),\n          author: {\n            id: channelId,\n            name,\n            user,\n            channel_url: `https://www.youtube.com/channel/${channelId}`,\n            user_url: `https://www.youtube.com/user/${user}`,\n            thumbnails: details.channelThumbnail.thumbnails.map(thumbnail => {\n              thumbnail.url = urllib.resolve(VIDEO_URL, thumbnail.url);\n              return thumbnail;\n            }),\n            verified: isVerified(details.ownerBadges),\n\n            [Symbol.toPrimitive]() {\n              console.warn(`\\`relatedVideo.author\\` will be removed in a near future release, ` +\n                `use \\`relatedVideo.author.name\\` instead.`);\n              return video.author.name;\n            },\n\n          },\n          short_view_count_text: shortViewCount.split(' ')[0],\n          view_count: viewCount.replace(/,/g, ''),\n          length_seconds: details.lengthText ?\n            Math.floor(parseTimestamp(getText(details.lengthText)) / 1000) :\n            rvsParams && `${rvsParams.length_seconds}`,\n          thumbnails: details.thumbnail.thumbnails,\n          isLive: !!(details.badges && details.badges.find(b => b.metadataBadgeRenderer.label === 'LIVE NOW')),\n        };\n\n        utils.deprecate(video, 'author_thumbnail', video.author.thumbnails[0].url,\n          'relatedVideo.author_thumbnail', 'relatedVideo.author.thumbnails[0].url');\n        utils.deprecate(video, 'ucid', video.author.id, 'relatedVideo.ucid', 'relatedVideo.author.id');\n        utils.deprecate(video, 'video_thumbnail', video.thumbnails[0].url,\n          'relatedVideo.video_thumbnail', 'relatedVideo.thumbnails[0].url');\n        videos.push(video);\n      } catch (err) {\n        // Skip.\n      }\n    }\n  }\n  return videos;\n};\n\n/**\n * Get like count.\n *\n * @param {string} info\n * @returns {number}\n */\nexports.getLikes = info => {\n  try {\n    let contents = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n    let video = contents.find(r => r.videoPrimaryInfoRenderer);\n    let buttons = video.videoPrimaryInfoRenderer.videoActions.menuRenderer.topLevelButtons;\n    let like = buttons.find(b => b.toggleButtonRenderer &&\n      b.toggleButtonRenderer.defaultIcon.iconType === 'LIKE');\n    return parseInt(like.toggleButtonRenderer.defaultText.accessibility.accessibilityData.label.replace(/\\D+/g, ''));\n  } catch (err) {\n    return null;\n  }\n};\n\n/**\n * Get dislike count.\n *\n * @param {string} info\n * @returns {number}\n */\nexports.getDislikes = info => {\n  try {\n    let contents = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n    let video = contents.find(r => r.videoPrimaryInfoRenderer);\n    let buttons = video.videoPrimaryInfoRenderer.videoActions.menuRenderer.topLevelButtons;\n    let dislike = buttons.find(b => b.toggleButtonRenderer &&\n      b.toggleButtonRenderer.defaultIcon.iconType === 'DISLIKE');\n    return parseInt(dislike.toggleButtonRenderer.defaultText.accessibility.accessibilityData.label.replace(/\\D+/g, ''));\n  } catch (err) {\n    return null;\n  }\n};\n\n/**\n * Cleans up a few fields on `videoDetails`.\n *\n * @param {Object} videoDetails\n * @returns {Object}\n */\nexports.cleanVideoDetails = videoDetails => {\n  videoDetails.thumbnails = videoDetails.thumbnail.thumbnails;\n  delete videoDetails.thumbnail;\n  utils.deprecate(videoDetails, 'thumbnail', { thumbnails: videoDetails.thumbnails },\n    'videoDetails.thumbnail.thumbnails', 'videoDetails.thumbnails');\n  videoDetails.description = videoDetails.shortDescription || getText(videoDetails.description);\n  delete videoDetails.shortDescription;\n  utils.deprecate(videoDetails, 'shortDescription', videoDetails.description,\n    'videoDetails.shortDescription', 'videoDetails.description');\n  return videoDetails;\n};\n"]},"metadata":{},"sourceType":"script"}