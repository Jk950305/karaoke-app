{"ast":null,"code":"/*jshint node:true*/\n'use strict';\n\nvar path = require('path');\n\nvar util = require('util');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar utils = require('./utils');\n\nvar ARGLISTS = ['_global', '_audio', '_audioFilters', '_video', '_videoFilters', '_sizeFilters', '_complexFilters'];\n/**\n * Create an ffmpeg command\n *\n * Can be called with or without the 'new' operator, and the 'input' parameter\n * may be specified as 'options.source' instead (or passed later with the\n * addInput method).\n *\n * @constructor\n * @param {String|ReadableStream} [input] input file path or readable stream\n * @param {Object} [options] command options\n * @param {Object} [options.logger=<no logging>] logger object with 'error', 'warning', 'info' and 'debug' methods\n * @param {Number} [options.niceness=0] ffmpeg process niceness, ignored on Windows\n * @param {Number} [options.priority=0] alias for `niceness`\n * @param {String} [options.presets=\"fluent-ffmpeg/lib/presets\"] directory to load presets from\n * @param {String} [options.preset=\"fluent-ffmpeg/lib/presets\"] alias for `presets`\n * @param {String} [options.stdoutLines=100] maximum lines of ffmpeg output to keep in memory, use 0 for unlimited\n * @param {Number} [options.timeout=<no timeout>] ffmpeg processing timeout in seconds\n * @param {String|ReadableStream} [options.source=<no input>] alias for the `input` parameter\n */\n\nfunction FfmpegCommand(input, options) {\n  // Make 'new' optional\n  if (!(this instanceof FfmpegCommand)) {\n    return new FfmpegCommand(input, options);\n  }\n\n  EventEmitter.call(this);\n\n  if (typeof input === 'object' && !('readable' in input)) {\n    // Options object passed directly\n    options = input;\n  } else {\n    // Input passed first\n    options = options || {};\n    options.source = input;\n  } // Add input if present\n\n\n  this._inputs = [];\n\n  if (options.source) {\n    this.input(options.source);\n  } // Add target-less output for backwards compatibility\n\n\n  this._outputs = [];\n  this.output(); // Create argument lists\n\n  var self = this;\n  ['_global', '_complexFilters'].forEach(function (prop) {\n    self[prop] = utils.args();\n  }); // Set default option values\n\n  options.stdoutLines = 'stdoutLines' in options ? options.stdoutLines : 100;\n  options.presets = options.presets || options.preset || path.join(__dirname, 'presets');\n  options.niceness = options.niceness || options.priority || 0; // Save options\n\n  this.options = options; // Setup logger\n\n  this.logger = options.logger || {\n    debug: function () {},\n    info: function () {},\n    warn: function () {},\n    error: function () {}\n  };\n}\n\nutil.inherits(FfmpegCommand, EventEmitter);\nmodule.exports = FfmpegCommand;\n/**\n * Clone an ffmpeg command\n *\n * This method is useful when you want to process the same input multiple times.\n * It returns a new FfmpegCommand instance with the exact same options.\n *\n * All options set _after_ the clone() call will only be applied to the instance\n * it has been called on.\n *\n * @example\n *   var command = ffmpeg('/path/to/source.avi')\n *     .audioCodec('libfaac')\n *     .videoCodec('libx264')\n *     .format('mp4');\n *\n *   command.clone()\n *     .size('320x200')\n *     .save('/path/to/output-small.mp4');\n *\n *   command.clone()\n *     .size('640x400')\n *     .save('/path/to/output-medium.mp4');\n *\n *   command.save('/path/to/output-original-size.mp4');\n *\n * @method FfmpegCommand#clone\n * @return FfmpegCommand\n */\n\nFfmpegCommand.prototype.clone = function () {\n  var clone = new FfmpegCommand();\n  var self = this; // Clone options and logger\n\n  clone.options = this.options;\n  clone.logger = this.logger; // Clone inputs\n\n  clone._inputs = this._inputs.map(function (input) {\n    return {\n      source: input.source,\n      options: input.options.clone()\n    };\n  }); // Create first output\n\n  if ('target' in this._outputs[0]) {\n    // We have outputs set, don't clone them and create first output\n    clone._outputs = [];\n    clone.output();\n  } else {\n    // No outputs set, clone first output options\n    clone._outputs = [clone._currentOutput = {\n      flags: {}\n    }];\n    ['audio', 'audioFilters', 'video', 'videoFilters', 'sizeFilters', 'options'].forEach(function (key) {\n      clone._currentOutput[key] = self._currentOutput[key].clone();\n    });\n\n    if (this._currentOutput.sizeData) {\n      clone._currentOutput.sizeData = {};\n      utils.copy(this._currentOutput.sizeData, clone._currentOutput.sizeData);\n    }\n\n    utils.copy(this._currentOutput.flags, clone._currentOutput.flags);\n  } // Clone argument lists\n\n\n  ['_global', '_complexFilters'].forEach(function (prop) {\n    clone[prop] = self[prop].clone();\n  });\n  return clone;\n};\n/* Add methods from options submodules */\n\n\nrequire('./options/inputs')(FfmpegCommand.prototype);\n\nrequire('./options/audio')(FfmpegCommand.prototype);\n\nrequire('./options/video')(FfmpegCommand.prototype);\n\nrequire('./options/videosize')(FfmpegCommand.prototype);\n\nrequire('./options/output')(FfmpegCommand.prototype);\n\nrequire('./options/custom')(FfmpegCommand.prototype);\n\nrequire('./options/misc')(FfmpegCommand.prototype);\n/* Add processor methods */\n\n\nrequire('./processor')(FfmpegCommand.prototype);\n/* Add capabilities methods */\n\n\nrequire('./capabilities')(FfmpegCommand.prototype);\n\nFfmpegCommand.setFfmpegPath = function (path) {\n  new FfmpegCommand().setFfmpegPath(path);\n};\n\nFfmpegCommand.setFfprobePath = function (path) {\n  new FfmpegCommand().setFfprobePath(path);\n};\n\nFfmpegCommand.setFlvtoolPath = function (path) {\n  new FfmpegCommand().setFlvtoolPath(path);\n};\n\nFfmpegCommand.availableFilters = FfmpegCommand.getAvailableFilters = function (callback) {\n  new FfmpegCommand().availableFilters(callback);\n};\n\nFfmpegCommand.availableCodecs = FfmpegCommand.getAvailableCodecs = function (callback) {\n  new FfmpegCommand().availableCodecs(callback);\n};\n\nFfmpegCommand.availableFormats = FfmpegCommand.getAvailableFormats = function (callback) {\n  new FfmpegCommand().availableFormats(callback);\n};\n\nFfmpegCommand.availableEncoders = FfmpegCommand.getAvailableEncoders = function (callback) {\n  new FfmpegCommand().availableEncoders(callback);\n};\n/* Add ffprobe methods */\n\n\nrequire('./ffprobe')(FfmpegCommand.prototype);\n\nFfmpegCommand.ffprobe = function (file) {\n  var instance = new FfmpegCommand(file);\n  instance.ffprobe.apply(instance, Array.prototype.slice.call(arguments, 1));\n};\n/* Add processing recipes */\n\n\nrequire('./recipes')(FfmpegCommand.prototype);","map":{"version":3,"sources":["/Users/jonkim/my-app/node_modules/fluent-ffmpeg/lib/fluent-ffmpeg.js"],"names":["path","require","util","EventEmitter","utils","ARGLISTS","FfmpegCommand","input","options","call","source","_inputs","_outputs","output","self","forEach","prop","args","stdoutLines","presets","preset","join","__dirname","niceness","priority","logger","debug","info","warn","error","inherits","module","exports","prototype","clone","map","_currentOutput","flags","key","sizeData","copy","setFfmpegPath","setFfprobePath","setFlvtoolPath","availableFilters","getAvailableFilters","callback","availableCodecs","getAvailableCodecs","availableFormats","getAvailableFormats","availableEncoders","getAvailableEncoders","ffprobe","file","instance","apply","Array","slice","arguments"],"mappings":"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","sourcesContent":["/*jshint node:true*/\n'use strict';\n\nvar path = require('path');\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\nvar utils = require('./utils');\nvar ARGLISTS = ['_global', '_audio', '_audioFilters', '_video', '_videoFilters', '_sizeFilters', '_complexFilters'];\n\n\n/**\n * Create an ffmpeg command\n *\n * Can be called with or without the 'new' operator, and the 'input' parameter\n * may be specified as 'options.source' instead (or passed later with the\n * addInput method).\n *\n * @constructor\n * @param {String|ReadableStream} [input] input file path or readable stream\n * @param {Object} [options] command options\n * @param {Object} [options.logger=<no logging>] logger object with 'error', 'warning', 'info' and 'debug' methods\n * @param {Number} [options.niceness=0] ffmpeg process niceness, ignored on Windows\n * @param {Number} [options.priority=0] alias for `niceness`\n * @param {String} [options.presets=\"fluent-ffmpeg/lib/presets\"] directory to load presets from\n * @param {String} [options.preset=\"fluent-ffmpeg/lib/presets\"] alias for `presets`\n * @param {String} [options.stdoutLines=100] maximum lines of ffmpeg output to keep in memory, use 0 for unlimited\n * @param {Number} [options.timeout=<no timeout>] ffmpeg processing timeout in seconds\n * @param {String|ReadableStream} [options.source=<no input>] alias for the `input` parameter\n */\nfunction FfmpegCommand(input, options) {\n  // Make 'new' optional\n  if (!(this instanceof FfmpegCommand)) {\n    return new FfmpegCommand(input, options);\n  }\n\n  EventEmitter.call(this);\n\n  if (typeof input === 'object' && !('readable' in input)) {\n    // Options object passed directly\n    options = input;\n  } else {\n    // Input passed first\n    options = options || {};\n    options.source = input;\n  }\n\n  // Add input if present\n  this._inputs = [];\n  if (options.source) {\n    this.input(options.source);\n  }\n\n  // Add target-less output for backwards compatibility\n  this._outputs = [];\n  this.output();\n\n  // Create argument lists\n  var self = this;\n  ['_global', '_complexFilters'].forEach(function(prop) {\n    self[prop] = utils.args();\n  });\n\n  // Set default option values\n  options.stdoutLines = 'stdoutLines' in options ? options.stdoutLines : 100;\n  options.presets = options.presets || options.preset || path.join(__dirname, 'presets');\n  options.niceness = options.niceness || options.priority || 0;\n\n  // Save options\n  this.options = options;\n\n  // Setup logger\n  this.logger = options.logger || {\n    debug: function() {},\n    info: function() {},\n    warn: function() {},\n    error: function() {}\n  };\n}\nutil.inherits(FfmpegCommand, EventEmitter);\nmodule.exports = FfmpegCommand;\n\n\n/**\n * Clone an ffmpeg command\n *\n * This method is useful when you want to process the same input multiple times.\n * It returns a new FfmpegCommand instance with the exact same options.\n *\n * All options set _after_ the clone() call will only be applied to the instance\n * it has been called on.\n *\n * @example\n *   var command = ffmpeg('/path/to/source.avi')\n *     .audioCodec('libfaac')\n *     .videoCodec('libx264')\n *     .format('mp4');\n *\n *   command.clone()\n *     .size('320x200')\n *     .save('/path/to/output-small.mp4');\n *\n *   command.clone()\n *     .size('640x400')\n *     .save('/path/to/output-medium.mp4');\n *\n *   command.save('/path/to/output-original-size.mp4');\n *\n * @method FfmpegCommand#clone\n * @return FfmpegCommand\n */\nFfmpegCommand.prototype.clone = function() {\n  var clone = new FfmpegCommand();\n  var self = this;\n\n  // Clone options and logger\n  clone.options = this.options;\n  clone.logger = this.logger;\n\n  // Clone inputs\n  clone._inputs = this._inputs.map(function(input) {\n    return {\n      source: input.source,\n      options: input.options.clone()\n    };\n  });\n\n  // Create first output\n  if ('target' in this._outputs[0]) {\n    // We have outputs set, don't clone them and create first output\n    clone._outputs = [];\n    clone.output();\n  } else {\n    // No outputs set, clone first output options\n    clone._outputs = [\n      clone._currentOutput = {\n        flags: {}\n      }\n    ];\n\n    ['audio', 'audioFilters', 'video', 'videoFilters', 'sizeFilters', 'options'].forEach(function(key) {\n      clone._currentOutput[key] = self._currentOutput[key].clone();\n    });\n\n    if (this._currentOutput.sizeData) {\n      clone._currentOutput.sizeData = {};\n      utils.copy(this._currentOutput.sizeData, clone._currentOutput.sizeData);\n    }\n\n    utils.copy(this._currentOutput.flags, clone._currentOutput.flags);\n  }\n\n  // Clone argument lists\n  ['_global', '_complexFilters'].forEach(function(prop) {\n    clone[prop] = self[prop].clone();\n  });\n\n  return clone;\n};\n\n\n/* Add methods from options submodules */\n\nrequire('./options/inputs')(FfmpegCommand.prototype);\nrequire('./options/audio')(FfmpegCommand.prototype);\nrequire('./options/video')(FfmpegCommand.prototype);\nrequire('./options/videosize')(FfmpegCommand.prototype);\nrequire('./options/output')(FfmpegCommand.prototype);\nrequire('./options/custom')(FfmpegCommand.prototype);\nrequire('./options/misc')(FfmpegCommand.prototype);\n\n\n/* Add processor methods */\n\nrequire('./processor')(FfmpegCommand.prototype);\n\n\n/* Add capabilities methods */\n\nrequire('./capabilities')(FfmpegCommand.prototype);\n\nFfmpegCommand.setFfmpegPath = function(path) {\n  (new FfmpegCommand()).setFfmpegPath(path);\n};\n\nFfmpegCommand.setFfprobePath = function(path) {\n  (new FfmpegCommand()).setFfprobePath(path);\n};\n\nFfmpegCommand.setFlvtoolPath = function(path) {\n  (new FfmpegCommand()).setFlvtoolPath(path);\n};\n\nFfmpegCommand.availableFilters =\nFfmpegCommand.getAvailableFilters = function(callback) {\n  (new FfmpegCommand()).availableFilters(callback);\n};\n\nFfmpegCommand.availableCodecs =\nFfmpegCommand.getAvailableCodecs = function(callback) {\n  (new FfmpegCommand()).availableCodecs(callback);\n};\n\nFfmpegCommand.availableFormats =\nFfmpegCommand.getAvailableFormats = function(callback) {\n  (new FfmpegCommand()).availableFormats(callback);\n};\n\nFfmpegCommand.availableEncoders =\nFfmpegCommand.getAvailableEncoders = function(callback) {\n  (new FfmpegCommand()).availableEncoders(callback);\n};\n\n\n/* Add ffprobe methods */\n\nrequire('./ffprobe')(FfmpegCommand.prototype);\n\nFfmpegCommand.ffprobe = function(file) {\n  var instance = new FfmpegCommand(file);\n  instance.ffprobe.apply(instance, Array.prototype.slice.call(arguments, 1));\n};\n\n/* Add processing recipes */\n\nrequire('./recipes')(FfmpegCommand.prototype);\n"]},"metadata":{},"sourceType":"script"}