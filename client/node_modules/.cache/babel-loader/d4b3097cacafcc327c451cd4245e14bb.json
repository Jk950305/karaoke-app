{"ast":null,"code":"/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n/*\n *! Video-related methods\n */\n\n\nmodule.exports = function (proto) {\n  /**\n   * Disable video in the output\n   *\n   * @method FfmpegCommand#noVideo\n   * @category Video\n   * @aliases withNoVideo\n   *\n   * @return FfmpegCommand\n   */\n  proto.withNoVideo = proto.noVideo = function () {\n    this._currentOutput.video.clear();\n\n    this._currentOutput.videoFilters.clear();\n\n    this._currentOutput.video('-vn');\n\n    return this;\n  };\n  /**\n   * Specify video codec\n   *\n   * @method FfmpegCommand#videoCodec\n   * @category Video\n   * @aliases withVideoCodec\n   *\n   * @param {String} codec video codec name\n   * @return FfmpegCommand\n   */\n\n\n  proto.withVideoCodec = proto.videoCodec = function (codec) {\n    this._currentOutput.video('-vcodec', codec);\n\n    return this;\n  };\n  /**\n   * Specify video bitrate\n   *\n   * @method FfmpegCommand#videoBitrate\n   * @category Video\n   * @aliases withVideoBitrate\n   *\n   * @param {String|Number} bitrate video bitrate in kbps (with an optional 'k' suffix)\n   * @param {Boolean} [constant=false] enforce constant bitrate\n   * @return FfmpegCommand\n   */\n\n\n  proto.withVideoBitrate = proto.videoBitrate = function (bitrate, constant) {\n    bitrate = ('' + bitrate).replace(/k?$/, 'k');\n\n    this._currentOutput.video('-b:v', bitrate);\n\n    if (constant) {\n      this._currentOutput.video('-maxrate', bitrate, '-minrate', bitrate, '-bufsize', '3M');\n    }\n\n    return this;\n  };\n  /**\n   * Specify custom video filter(s)\n   *\n   * Can be called both with one or many filters, or a filter array.\n   *\n   * @example\n   * command.videoFilters('filter1');\n   *\n   * @example\n   * command.videoFilters('filter1', 'filter2=param1=value1:param2=value2');\n   *\n   * @example\n   * command.videoFilters(['filter1', 'filter2']);\n   *\n   * @example\n   * command.videoFilters([\n   *   {\n   *     filter: 'filter1'\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: 'param=value:param=value'\n   *   }\n   * ]);\n   *\n   * @example\n   * command.videoFilters(\n   *   {\n   *     filter: 'filter1',\n   *     options: ['value1', 'value2']\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: { param1: 'value1', param2: 'value2' }\n   *   }\n   * );\n   *\n   * @method FfmpegCommand#videoFilters\n   * @category Video\n   * @aliases withVideoFilter,withVideoFilters,videoFilter\n   *\n   * @param {...String|String[]|Object[]} filters video filter strings, string array or\n   *   filter specification array, each with the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|String[]|Object} [filters.options] filter option string, array, or object\n   * @return FfmpegCommand\n   */\n\n\n  proto.withVideoFilter = proto.withVideoFilters = proto.videoFilter = proto.videoFilters = function (filters) {\n    if (arguments.length > 1) {\n      filters = [].slice.call(arguments);\n    }\n\n    if (!Array.isArray(filters)) {\n      filters = [filters];\n    }\n\n    this._currentOutput.videoFilters(utils.makeFilterStrings(filters));\n\n    return this;\n  };\n  /**\n   * Specify output FPS\n   *\n   * @method FfmpegCommand#fps\n   * @category Video\n   * @aliases withOutputFps,withOutputFPS,withFpsOutput,withFPSOutput,withFps,withFPS,outputFPS,outputFps,fpsOutput,FPSOutput,FPS\n   *\n   * @param {Number} fps output FPS\n   * @return FfmpegCommand\n   */\n\n\n  proto.withOutputFps = proto.withOutputFPS = proto.withFpsOutput = proto.withFPSOutput = proto.withFps = proto.withFPS = proto.outputFPS = proto.outputFps = proto.fpsOutput = proto.FPSOutput = proto.fps = proto.FPS = function (fps) {\n    this._currentOutput.video('-r', fps);\n\n    return this;\n  };\n  /**\n   * Only transcode a certain number of frames\n   *\n   * @method FfmpegCommand#frames\n   * @category Video\n   * @aliases takeFrames,withFrames\n   *\n   * @param {Number} frames frame count\n   * @return FfmpegCommand\n   */\n\n\n  proto.takeFrames = proto.withFrames = proto.frames = function (frames) {\n    this._currentOutput.video('-vframes', frames);\n\n    return this;\n  };\n};","map":{"version":3,"sources":["/Users/jonkim/my-app/node_modules/fluent-ffmpeg/lib/options/video.js"],"names":["utils","require","module","exports","proto","withNoVideo","noVideo","_currentOutput","video","clear","videoFilters","withVideoCodec","videoCodec","codec","withVideoBitrate","videoBitrate","bitrate","constant","replace","withVideoFilter","withVideoFilters","videoFilter","filters","arguments","length","slice","call","Array","isArray","makeFilterStrings","withOutputFps","withOutputFPS","withFpsOutput","withFPSOutput","withFps","withFPS","outputFPS","outputFps","fpsOutput","FPSOutput","fps","FPS","takeFrames","withFrames","frames"],"mappings":"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","sourcesContent":["/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n\n/*\n *! Video-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Disable video in the output\n   *\n   * @method FfmpegCommand#noVideo\n   * @category Video\n   * @aliases withNoVideo\n   *\n   * @return FfmpegCommand\n   */\n  proto.withNoVideo =\n  proto.noVideo = function() {\n    this._currentOutput.video.clear();\n    this._currentOutput.videoFilters.clear();\n    this._currentOutput.video('-vn');\n\n    return this;\n  };\n\n\n  /**\n   * Specify video codec\n   *\n   * @method FfmpegCommand#videoCodec\n   * @category Video\n   * @aliases withVideoCodec\n   *\n   * @param {String} codec video codec name\n   * @return FfmpegCommand\n   */\n  proto.withVideoCodec =\n  proto.videoCodec = function(codec) {\n    this._currentOutput.video('-vcodec', codec);\n    return this;\n  };\n\n\n  /**\n   * Specify video bitrate\n   *\n   * @method FfmpegCommand#videoBitrate\n   * @category Video\n   * @aliases withVideoBitrate\n   *\n   * @param {String|Number} bitrate video bitrate in kbps (with an optional 'k' suffix)\n   * @param {Boolean} [constant=false] enforce constant bitrate\n   * @return FfmpegCommand\n   */\n  proto.withVideoBitrate =\n  proto.videoBitrate = function(bitrate, constant) {\n    bitrate = ('' + bitrate).replace(/k?$/, 'k');\n\n    this._currentOutput.video('-b:v', bitrate);\n    if (constant) {\n      this._currentOutput.video(\n        '-maxrate', bitrate,\n        '-minrate', bitrate,\n        '-bufsize', '3M'\n      );\n    }\n\n    return this;\n  };\n\n\n  /**\n   * Specify custom video filter(s)\n   *\n   * Can be called both with one or many filters, or a filter array.\n   *\n   * @example\n   * command.videoFilters('filter1');\n   *\n   * @example\n   * command.videoFilters('filter1', 'filter2=param1=value1:param2=value2');\n   *\n   * @example\n   * command.videoFilters(['filter1', 'filter2']);\n   *\n   * @example\n   * command.videoFilters([\n   *   {\n   *     filter: 'filter1'\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: 'param=value:param=value'\n   *   }\n   * ]);\n   *\n   * @example\n   * command.videoFilters(\n   *   {\n   *     filter: 'filter1',\n   *     options: ['value1', 'value2']\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: { param1: 'value1', param2: 'value2' }\n   *   }\n   * );\n   *\n   * @method FfmpegCommand#videoFilters\n   * @category Video\n   * @aliases withVideoFilter,withVideoFilters,videoFilter\n   *\n   * @param {...String|String[]|Object[]} filters video filter strings, string array or\n   *   filter specification array, each with the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|String[]|Object} [filters.options] filter option string, array, or object\n   * @return FfmpegCommand\n   */\n  proto.withVideoFilter =\n  proto.withVideoFilters =\n  proto.videoFilter =\n  proto.videoFilters = function(filters) {\n    if (arguments.length > 1) {\n      filters = [].slice.call(arguments);\n    }\n\n    if (!Array.isArray(filters)) {\n      filters = [filters];\n    }\n\n    this._currentOutput.videoFilters(utils.makeFilterStrings(filters));\n\n    return this;\n  };\n\n\n  /**\n   * Specify output FPS\n   *\n   * @method FfmpegCommand#fps\n   * @category Video\n   * @aliases withOutputFps,withOutputFPS,withFpsOutput,withFPSOutput,withFps,withFPS,outputFPS,outputFps,fpsOutput,FPSOutput,FPS\n   *\n   * @param {Number} fps output FPS\n   * @return FfmpegCommand\n   */\n  proto.withOutputFps =\n  proto.withOutputFPS =\n  proto.withFpsOutput =\n  proto.withFPSOutput =\n  proto.withFps =\n  proto.withFPS =\n  proto.outputFPS =\n  proto.outputFps =\n  proto.fpsOutput =\n  proto.FPSOutput =\n  proto.fps =\n  proto.FPS = function(fps) {\n    this._currentOutput.video('-r', fps);\n    return this;\n  };\n\n\n  /**\n   * Only transcode a certain number of frames\n   *\n   * @method FfmpegCommand#frames\n   * @category Video\n   * @aliases takeFrames,withFrames\n   *\n   * @param {Number} frames frame count\n   * @return FfmpegCommand\n   */\n  proto.takeFrames =\n  proto.withFrames =\n  proto.frames = function(frames) {\n    this._currentOutput.video('-vframes', frames);\n    return this;\n  };\n};\n"]},"metadata":{},"sourceType":"script"}