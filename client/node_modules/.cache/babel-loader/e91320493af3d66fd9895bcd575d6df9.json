{"ast":null,"code":"const {\n  setTimeout\n} = require('timers'); // A cache that expires.\n\n\nmodule.exports = class Cache extends Map {\n  constructor(timeout = 1000) {\n    super();\n    this.timeout = timeout;\n  }\n\n  set(key, value) {\n    if (this.has(key)) {\n      clearTimeout(super.get(key).tid);\n    }\n\n    super.set(key, {\n      tid: setTimeout(this.delete.bind(this, key), this.timeout).unref(),\n      value\n    });\n  }\n\n  get(key) {\n    let entry = super.get(key);\n\n    if (entry) {\n      return entry.value;\n    }\n\n    return null;\n  }\n\n  getOrSet(key, fn) {\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      let value = fn();\n      this.set(key, value);\n\n      (async () => {\n        try {\n          await value;\n        } catch (err) {\n          this.delete(key);\n        }\n      })();\n\n      return value;\n    }\n  }\n\n  delete(key) {\n    let entry = super.get(key);\n\n    if (entry) {\n      clearTimeout(entry.tid);\n      super.delete(key);\n    }\n  }\n\n  clear() {\n    for (let entry of this.values()) {\n      clearTimeout(entry.tid);\n    }\n\n    super.clear();\n  }\n\n};","map":{"version":3,"sources":["/Users/jonkim/my-app/node_modules/ytdl-core/lib/cache.js"],"names":["setTimeout","require","module","exports","Cache","Map","constructor","timeout","set","key","value","has","clearTimeout","get","tid","delete","bind","unref","entry","getOrSet","fn","err","clear","values"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,OAAO,CAAC,QAAD,CAA9B,C,CAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,KAAN,SAAoBC,GAApB,CAAwB;AACvCC,EAAAA,WAAW,CAACC,OAAO,GAAG,IAAX,EAAiB;AAC1B;AACA,SAAKA,OAAL,GAAeA,OAAf;AACD;;AACDC,EAAAA,GAAG,CAACC,GAAD,EAAMC,KAAN,EAAa;AACd,QAAI,KAAKC,GAAL,CAASF,GAAT,CAAJ,EAAmB;AACjBG,MAAAA,YAAY,CAAC,MAAMC,GAAN,CAAUJ,GAAV,EAAeK,GAAhB,CAAZ;AACD;;AACD,UAAMN,GAAN,CAAUC,GAAV,EAAe;AACbK,MAAAA,GAAG,EAAEd,UAAU,CAAC,KAAKe,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,EAAuBP,GAAvB,CAAD,EAA8B,KAAKF,OAAnC,CAAV,CAAsDU,KAAtD,EADQ;AAEbP,MAAAA;AAFa,KAAf;AAID;;AACDG,EAAAA,GAAG,CAACJ,GAAD,EAAM;AACP,QAAIS,KAAK,GAAG,MAAML,GAAN,CAAUJ,GAAV,CAAZ;;AACA,QAAIS,KAAJ,EAAW;AACT,aAAOA,KAAK,CAACR,KAAb;AACD;;AACD,WAAO,IAAP;AACD;;AACDS,EAAAA,QAAQ,CAACV,GAAD,EAAMW,EAAN,EAAU;AAChB,QAAI,KAAKT,GAAL,CAASF,GAAT,CAAJ,EAAmB;AACjB,aAAO,KAAKI,GAAL,CAASJ,GAAT,CAAP;AACD,KAFD,MAEO;AACL,UAAIC,KAAK,GAAGU,EAAE,EAAd;AACA,WAAKZ,GAAL,CAASC,GAAT,EAAcC,KAAd;;AACA,OAAC,YAAW;AACV,YAAI;AACF,gBAAMA,KAAN;AACD,SAFD,CAEE,OAAOW,GAAP,EAAY;AACZ,eAAKN,MAAL,CAAYN,GAAZ;AACD;AACF,OAND;;AAOA,aAAOC,KAAP;AACD;AACF;;AACDK,EAAAA,MAAM,CAACN,GAAD,EAAM;AACV,QAAIS,KAAK,GAAG,MAAML,GAAN,CAAUJ,GAAV,CAAZ;;AACA,QAAIS,KAAJ,EAAW;AACTN,MAAAA,YAAY,CAACM,KAAK,CAACJ,GAAP,CAAZ;AACA,YAAMC,MAAN,CAAaN,GAAb;AACD;AACF;;AACDa,EAAAA,KAAK,GAAG;AACN,SAAK,IAAIJ,KAAT,IAAkB,KAAKK,MAAL,EAAlB,EAAiC;AAC/BX,MAAAA,YAAY,CAACM,KAAK,CAACJ,GAAP,CAAZ;AACD;;AACD,UAAMQ,KAAN;AACD;;AAjDsC,CAAzC","sourcesContent":["const { setTimeout } = require('timers');\n\n// A cache that expires.\nmodule.exports = class Cache extends Map {\n  constructor(timeout = 1000) {\n    super();\n    this.timeout = timeout;\n  }\n  set(key, value) {\n    if (this.has(key)) {\n      clearTimeout(super.get(key).tid);\n    }\n    super.set(key, {\n      tid: setTimeout(this.delete.bind(this, key), this.timeout).unref(),\n      value,\n    });\n  }\n  get(key) {\n    let entry = super.get(key);\n    if (entry) {\n      return entry.value;\n    }\n    return null;\n  }\n  getOrSet(key, fn) {\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      let value = fn();\n      this.set(key, value);\n      (async() => {\n        try {\n          await value;\n        } catch (err) {\n          this.delete(key);\n        }\n      })();\n      return value;\n    }\n  }\n  delete(key) {\n    let entry = super.get(key);\n    if (entry) {\n      clearTimeout(entry.tid);\n      super.delete(key);\n    }\n  }\n  clear() {\n    for (let entry of this.values()) {\n      clearTimeout(entry.tid);\n    }\n    super.clear();\n  }\n};\n"]},"metadata":{},"sourceType":"script"}